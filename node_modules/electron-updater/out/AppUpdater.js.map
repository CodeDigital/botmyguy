{"version":3,"sources":["../src/AppUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, asArray, CancellationToken, newError, PublishConfiguration, UpdateInfo, UUID, DownloadOptions, CancellationError } from \"builder-util-runtime\"\nimport { randomBytes } from \"crypto\"\nimport { Notification } from \"electron\"\nimport isDev from \"electron-is-dev\"\nimport { EventEmitter } from \"events\"\nimport { ensureDir, outputFile, readFile, rename, unlink } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { eq as isVersionsEqual, gt as isVersionGreaterThan, parse as parseVersion, prerelease as getVersionPreleaseComponents, SemVer } from \"semver\"\nimport \"source-map-support/register\"\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\nimport { GenericProvider } from \"./providers/GenericProvider\"\nimport { DOWNLOAD_PROGRESS, Logger, Provider, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED, UpdateCheckResult, UpdaterSignal } from \"./main\"\nimport { createClient, isUrlProbablySupportMultiRangeRequests } from \"./providerFactory\"\n\nexport abstract class AppUpdater extends EventEmitter {\n  /**\n   * Whether to automatically download an update when it is found.\n   */\n  autoDownload: boolean = true\n\n  /**\n   * Whether to automatically install a downloaded update on app quit (if `quitAndInstall` was not called before).\n   *\n   * Applicable only on Windows and Linux.\n   */\n  autoInstallOnAppQuit: boolean = true\n\n  /**\n   * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n   *\n   * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\n   */\n  allowPrerelease: boolean = false\n\n  /**\n   * *GitHub provider only.* Get all release notes (from current version to latest), not just the latest.\n   * @default false\n   */\n  fullChangelog: boolean = false\n\n  /**\n   * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n   *\n   * Taken in account only if channel differs (pre-release version component in terms of semantic versioning).\n   *\n   * @default false\n   */\n  allowDowngrade: boolean = false\n\n  /**\n   * The current application version.\n   */\n  readonly currentVersion: SemVer\n\n  private _channel: string | null = null\n\n  protected readonly downloadedUpdateHelper: DownloadedUpdateHelper\n\n  /**\n   * Get the update channel. Not applicable for GitHub. Doesn't return `channel` from the update configuration, only if was previously set.\n   */\n  get channel(): string | null {\n    return this._channel\n  }\n\n  /**\n   * Set the update channel. Not applicable for GitHub. Overrides `channel` in the update configuration.\n   *\n   * `allowDowngrade` will be automatically set to `true`. If this behavior is not suitable for you, simple set `allowDowngrade` explicitly after.\n   */\n  set channel(value: string | null) {\n    if (this._channel != null) {\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof value !== \"string\") {\n        throw newError(`Channel must be a string, but got: ${value}`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n      else if (value.length === 0) {\n        throw newError(`Channel must be not an empty string`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n    }\n\n    this._channel = value\n    this.allowDowngrade = true\n  }\n\n  /**\n   *  The request headers.\n   */\n  requestHeaders: OutgoingHttpHeaders | null = null\n\n  protected _logger: Logger = console\n\n  /**\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n   * Set it to `null` if you would like to disable a logging feature.\n   */\n  get logger(): Logger | null {\n    return this._logger\n  }\n\n  set logger(value: Logger | null) {\n    this._logger = value == null ? new NoOpLogger() : value\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\n   */\n  readonly signals = new UpdaterSignal(this)\n\n  private _appUpdateConfigPath: string | null = null\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * test only\n   * @private\n   */\n  set updateConfigPath(value: string | null) {\n    this.clientPromise = null\n    this._appUpdateConfigPath = value\n    this.configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n  }\n\n  private clientPromise: Promise<Provider<any>> | null = null\n\n  protected get provider(): Promise<Provider<any>> {\n    return this.clientPromise!!\n  }\n\n  protected readonly stagingUserIdPromise = new Lazy<string>(() => this.getOrCreateStagingUserId())\n\n  // public, allow to read old config for anyone\n  /** @internal */\n  configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n\n  private readonly untilAppReady: Promise<any>\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null = null\n\n  protected readonly app: Electron.App\n\n  protected updateInfo: UpdateInfo | null = null\n\n  /** @internal */\n  readonly httpExecutor: ElectronHttpExecutor\n\n  protected constructor(options: AllPublishOptions | null | undefined, app?: Electron.App) {\n    super()\n\n    this.on(\"error\", (error: Error) => {\n      this._logger.error(`Error: ${error.stack || error.message}`)\n    })\n\n    if (app != null || (global as any).__test_app != null) {\n      this.app = app || (global as any).__test_app\n      this.untilAppReady = Promise.resolve()\n      this.httpExecutor = null as any\n    }\n    else {\n      this.app = require(\"electron\").app\n      this.httpExecutor = new ElectronHttpExecutor((authInfo, callback) => this.emit(\"login\", authInfo, callback))\n      this.untilAppReady = new Promise(resolve => {\n        if (this.app.isReady()) {\n          resolve()\n        }\n        else {\n          this.app.on(\"ready\", resolve)\n        }\n      })\n    }\n\n    this.downloadedUpdateHelper = new DownloadedUpdateHelper(path.join(this.app.getPath(\"userData\"), \"__update__\"))\n\n    const currentVersionString = this.app.getVersion()\n    const currentVersion = parseVersion(currentVersionString)\n    if (currentVersion == null) {\n      throw newError(`App version is not a valid semver version: \"${currentVersionString}\"`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n    this.currentVersion = currentVersion\n\n    this.allowPrerelease = hasPrereleaseComponents(currentVersion)\n\n    if (options != null) {\n      this.setFeedURL(options)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n  getFeedURL(): string | null | undefined {\n    return \"Deprecated. Do not use it.\"\n  }\n\n  /**\n   * Configure update provider. If value is `string`, [GenericServerOptions](/configuration/publish.md#genericserveroptions) will be set with value as `url`.\n   * @param options If you want to override configuration in the `app-update.yml`.\n   */\n  setFeedURL(options: PublishConfiguration | AllPublishOptions | string) {\n    // https://github.com/electron-userland/electron-builder/issues/1105\n    let provider: Provider<any>\n    if (typeof options === \"string\") {\n      provider = new GenericProvider({provider: \"generic\", url: options}, this, isUrlProbablySupportMultiRangeRequests(options))\n    }\n    else {\n      provider = createClient(options, this)\n    }\n    this.clientPromise = Promise.resolve(provider)\n  }\n\n  /**\n   * Asks the server whether there is an update.\n   */\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\n    if (checkForUpdatesPromise != null) {\n      return checkForUpdatesPromise\n    }\n\n    checkForUpdatesPromise = this._checkForUpdates()\n    this.checkForUpdatesPromise = checkForUpdatesPromise\n    const nullizePromise = () => this.checkForUpdatesPromise = null\n    checkForUpdatesPromise\n      .then(nullizePromise)\n      .catch(nullizePromise)\n    return checkForUpdatesPromise\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return Promise.resolve(null)\n    }\n\n    const checkForUpdatesPromise = this.checkForUpdates()\n    checkForUpdatesPromise\n      .then(it => {\n        const downloadPromise = it.downloadPromise\n        if (downloadPromise == null) {\n          const debug = this._logger.debug\n          if (debug != null) {\n            debug(\"checkForUpdatesAndNotify called, downloadPromise is null\")\n          }\n          return\n        }\n\n        downloadPromise\n          .then(() => {\n            new Notification({\n              title: \"A new update is ready to install\",\n              body: `${this.app.getName()} version ${it.updateInfo.version} is downloaded and will be automatically installed on exit`\n            }).show()\n          })\n      })\n\n    return checkForUpdatesPromise\n  }\n\n  private async isStagingMatch(updateInfo: UpdateInfo): Promise<boolean> {\n    const rawStagingPercentage = updateInfo.stagingPercentage\n    let stagingPercentage = rawStagingPercentage\n    if (stagingPercentage == null) {\n      return true\n    }\n\n    stagingPercentage = parseInt(stagingPercentage as any, 10)\n    if (isNaN(stagingPercentage)) {\n      this._logger.warn(`Staging percentage is NaN: ${rawStagingPercentage}`)\n      return true\n    }\n\n    // convert from user 0-100 to internal 0-1\n    stagingPercentage = stagingPercentage / 100\n\n    const stagingUserId = await this.stagingUserIdPromise.value\n    const val = UUID.parse(stagingUserId).readUInt32BE(12)\n    const percentage = (val / 0xFFFFFFFF)\n    this._logger.info(`Staging percentage: ${stagingPercentage}, percentage: ${percentage}, user id: ${stagingUserId}`)\n    return percentage < stagingPercentage\n  }\n\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\n    try {\n      await this.untilAppReady\n      this._logger.info(\"Checking for update\")\n      this.emit(\"checking-for-update\")\n      return await this.doCheckForUpdates()\n    }\n    catch (e) {\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\n      throw e\n    }\n  }\n\n  private computeFinalHeaders(headers: OutgoingHttpHeaders) {\n    if (this.requestHeaders != null) {\n      Object.assign(headers, this.requestHeaders)\n    }\n    return headers\n  }\n\n  private async isUpdateAvailable(updateInfo: UpdateInfo): Promise<boolean> {\n    const latestVersion = parseVersion(updateInfo.version)\n    if (latestVersion == null) {\n      throw newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: \"${latestVersion}\"`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n\n    const currentVersion = this.currentVersion\n    if (isVersionsEqual(latestVersion, currentVersion)) {\n      return false\n    }\n\n    const isStagingMatch = await this.isStagingMatch(updateInfo)\n    if (!isStagingMatch) {\n      return false\n    }\n\n    // https://github.com/electron-userland/electron-builder/pull/3111#issuecomment-405033227\n    // https://github.com/electron-userland/electron-builder/pull/3111#issuecomment-405030797\n    const isLatestVersionNewer = isVersionGreaterThan(latestVersion, currentVersion)\n    if (!this.allowDowngrade) {\n      return isLatestVersionNewer\n    }\n\n    const currentVersionPrereleaseComponent = getVersionPreleaseComponents(currentVersion)\n    const latestVersionPrereleaseComponent = getVersionPreleaseComponents(latestVersion)\n    if (currentVersionPrereleaseComponent === latestVersionPrereleaseComponent) {\n      // allowDowngrade taken in account only if channel differs\n      return isLatestVersionNewer\n    }\n\n    return true\n  }\n\n  protected async getUpdateInfo(): Promise<UpdateInfo> {\n    await this.untilAppReady\n\n    if (this.clientPromise == null) {\n      this.clientPromise = this.configOnDisk.value.then(it => createClient(it, this))\n    }\n\n    const client = await this.clientPromise\n    const stagingUserId = await this.stagingUserIdPromise.value\n    client.setRequestHeaders(this.computeFinalHeaders({\"x-user-staging-id\": stagingUserId}))\n    return await client.getLatestVersion()\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    const updateInfo = await this.getUpdateInfo()\n    if (!await this.isUpdateAvailable(updateInfo)) {\n      this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${updateInfo.version}, downgrade is ${this.allowDowngrade ? \"allowed\" : \"disallowed\"}).`)\n      this.emit(\"update-not-available\", updateInfo)\n      return {\n        versionInfo: updateInfo,\n        updateInfo,\n      }\n    }\n\n    this.updateInfo = updateInfo\n\n    this.onUpdateAvailable(updateInfo)\n\n    const cancellationToken = new CancellationToken()\n    //noinspection ES6MissingAwait\n    return {\n      versionInfo: updateInfo,\n      updateInfo,\n      cancellationToken,\n      downloadPromise: this.autoDownload ? this.downloadUpdate(cancellationToken) : null\n    }\n  }\n\n  protected onUpdateAvailable(updateInfo: UpdateInfo) {\n    this._logger.info(`Found version ${updateInfo.version} (url: ${asArray(updateInfo.files).map(it => it.url).join(\", \")})`)\n    this.emit(\"update-available\", updateInfo)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  async downloadUpdate(cancellationToken: CancellationToken = new CancellationToken()): Promise<any> {\n    const updateInfo = this.updateInfo\n    if (updateInfo == null) {\n      const error = new Error(\"Please check update first\")\n      this.dispatchError(error)\n      throw error\n    }\n\n    this._logger.info(`Downloading update from ${asArray(updateInfo.files).map(it => it.url).join(\", \")}`)\n\n    try {\n      return await this.doDownloadUpdate({\n        updateInfo,\n        requestHeaders: await this.computeRequestHeaders(),\n        cancellationToken,\n      })\n    }\n    catch (e) {\n      this.dispatchError(e)\n      throw e\n    }\n  }\n\n  protected dispatchError(e: Error) {\n    this.emit(\"error\", e, (e.stack || e).toString())\n  }\n\n  protected async abstract doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>>\n\n  /**\n   * Restarts the app and installs the update after it has been downloaded.\n   * It should only be called after `update-downloaded` has been emitted.\n   *\n   * **Note:** `autoUpdater.quitAndInstall()` will close all application windows first and only emit `before-quit` event on `app` after that.\n   * This is different from the normal quit event sequence.\n   *\n   * @param isSilent *windows-only* Runs the installer in silent mode. Defaults to `false`.\n   * @param isForceRunAfter Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.\n   */\n  abstract quitAndInstall(isSilent?: boolean, isForceRunAfter?: boolean): void\n\n  private async loadUpdateConfig() {\n    if (this._appUpdateConfigPath == null) {\n      this._appUpdateConfigPath = isDev ? path.join(this.app.getAppPath(), \"dev-app-update.yml\") : path.join(process.resourcesPath!, \"app-update.yml\")\n    }\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\n  }\n\n  private async computeRequestHeaders(): Promise<OutgoingHttpHeaders> {\n    const fileExtraDownloadHeaders = (await this.provider).fileExtraDownloadHeaders\n    if (fileExtraDownloadHeaders != null) {\n      const requestHeaders = this.requestHeaders\n      return requestHeaders == null ? fileExtraDownloadHeaders : {\n        ...fileExtraDownloadHeaders,\n        ...requestHeaders,\n      }\n    }\n    return this.computeFinalHeaders({accept: \"*/*\"})\n  }\n\n  private async getOrCreateStagingUserId(): Promise<string> {\n    const file = path.join(this.app.getPath(\"userData\"), \".updaterId\")\n    try {\n      const id = await readFile(file, \"utf-8\")\n      if (UUID.check(id)) {\n        return id\n      }\n      else {\n        this._logger.warn(`Staging user id file exists, but content was invalid: ${id}`)\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)\n      }\n    }\n\n    const id = UUID.v5(randomBytes(4096), UUID.OID)\n    this._logger.info(`Generated new staging user ID: ${id}`)\n    try {\n      await outputFile(file, id)\n    }\n    catch (e) {\n      this._logger.warn(`Couldn't write out staging user ID: ${e}`)\n    }\n    return id\n  }\n\n  /** @internal */\n  get isAddNoCacheQuery(): boolean {\n    const headers = this.requestHeaders\n    // https://github.com/electron-userland/electron-builder/issues/3021\n    if (headers == null) {\n      return true\n    }\n\n    for (const headerName of Object.keys(headers)) {\n      const s = headerName.toLowerCase()\n      if (s === \"authorization\" || s === \"private-token\") {\n        return false\n      }\n    }\n    return true\n  }\n\n  protected async executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    const fileInfo = taskOptions.fileInfo\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: taskOptions.downloadUpdateOptions.requestHeaders,\n      cancellationToken: taskOptions.downloadUpdateOptions.cancellationToken,\n      sha2: (fileInfo.info as any).sha2,\n      sha512: fileInfo.info.sha512,\n    }\n\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    const updateInfo = taskOptions.downloadUpdateOptions.updateInfo\n    const version = updateInfo.version\n    const packageInfo = fileInfo.packageInfo\n\n    function getCacheUpdateFileName(): string {\n      // bloody NodeJS URL doesn't decode automatically\n      const urlPath = decodeURIComponent(taskOptions.fileInfo.url.pathname)\n      if (urlPath.endsWith(`.${taskOptions.fileExtension}`)) {\n        return path.posix.basename(urlPath)\n      }\n      else {\n        // url like /latest, generate name\n        return `update.${taskOptions.fileExtension}`\n      }\n    }\n\n    const cacheDir = this.downloadedUpdateHelper.cacheDir\n    await ensureDir(cacheDir)\n    const updateFileName = getCacheUpdateFileName()\n    let updateFile = path.join(cacheDir, updateFileName)\n    const packageFile = packageInfo == null ? null : path.join(cacheDir, `package-${version}${path.extname(packageInfo.path) || \".7z\"}`)\n\n    const done = async (isSaveCache: boolean) => {\n      this.downloadedUpdateHelper.setDownloadedFile(updateFile, packageFile, updateInfo, fileInfo)\n      if (isSaveCache) {\n        await this.downloadedUpdateHelper.cacheUpdateInfo(updateFileName)\n      }\n\n      this.emit(UPDATE_DOWNLOADED, updateInfo)\n      await taskOptions.done!!(updateFile)\n      return packageFile == null ? [updateFile] : [updateFile, packageFile]\n    }\n\n    const log = this._logger\n    const cachedUpdateFile = await this.downloadedUpdateHelper.validateDownloadedPath(updateFile, updateInfo, fileInfo, log)\n    if (cachedUpdateFile != null) {\n      updateFile = cachedUpdateFile\n      return await done(false)\n    }\n\n    const removeFileIfAny = async () => {\n      await this.downloadedUpdateHelper.clear()\n        .catch(() => {\n          // ignore\n        })\n      return await unlink(updateFile)\n        .catch(() => {\n          // ignore\n        })\n    }\n\n    // https://github.com/electron-userland/electron-builder/pull/2474#issuecomment-366481912\n    let nameCounter = 0\n    let tempUpdateFile = path.join(cacheDir, `temp-${updateFileName}`)\n    for (let i = 0; i < 3; i++) {\n      try {\n        await unlink(tempUpdateFile)\n      }\n      catch (e) {\n        if (e.code === \"ENOENT\") {\n          break\n        }\n\n        log.warn(`Error on remove temp update file: ${e}`)\n        tempUpdateFile = path.join(cacheDir, `temp-${nameCounter++}-${updateFileName}`)\n      }\n    }\n\n    try {\n      await taskOptions.task(tempUpdateFile, downloadOptions, packageFile, removeFileIfAny)\n      await rename(tempUpdateFile, updateFile)\n    }\n    catch (e) {\n      await removeFileIfAny()\n\n      if (e instanceof CancellationError) {\n        log.info(\"Cancelled\")\n        this.emit(\"update-cancelled\", updateInfo)\n      }\n      throw e\n    }\n\n    log.info(`New version ${version} has been downloaded to ${updateFile}`)\n    return await done(true)\n  }\n}\n\nexport interface DownloadUpdateOptions {\n  readonly updateInfo: UpdateInfo\n  readonly requestHeaders: OutgoingHttpHeaders\n  readonly cancellationToken: CancellationToken\n}\n\nfunction hasPrereleaseComponents(version: SemVer) {\n  const versionPrereleaseComponent = getVersionPreleaseComponents(version)\n  return versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0\n}\n\n/** @private */\nexport class NoOpLogger implements Logger {\n  info(message?: any) {\n    // ignore\n  }\n\n  warn(message?: any) {\n    // ignore\n  }\n\n  error(message?: any) {\n    // ignore\n  }\n}\n\nexport interface DownloadExecutorTask {\n  readonly fileExtension: string\n  readonly fileInfo: ResolvedUpdateFileInfo\n  readonly downloadUpdateOptions: DownloadUpdateOptions\n  readonly task: (destinationFile: string, downloadOptions: DownloadOptions, packageFile: string | null, removeTempDirIfAny: () => Promise<any>) => Promise<any>\n\n  readonly done?: (destinationFile: string) => Promise<any>\n}"],"sourceRoot":""}
