{"version":3,"sources":["../src/AppUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, asArray, CancellationToken, newError, PublishConfiguration, UpdateInfo, UUID } from \"builder-util-runtime\"\nimport { randomBytes } from \"crypto\"\nimport { Notification } from \"electron\"\nimport isDev from \"electron-is-dev\"\nimport { EventEmitter } from \"events\"\nimport { outputFile, readFile } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { eq as isVersionsEqual, gt as isVersionGreaterThan, prerelease as getVersionPreleaseComponents, valid as parseVersion } from \"semver\"\nimport \"source-map-support/register\"\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\nimport { GenericProvider } from \"./GenericProvider\"\nimport { Logger, Provider, UpdateCheckResult, UpdaterSignal } from \"./main\"\nimport { createClient, isUrlProbablySupportMultiRangeRequests } from \"./providerFactory\"\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\n\nexport abstract class AppUpdater extends EventEmitter {\n  /**\n   * Whether to automatically download an update when it is found.\n   */\n  autoDownload: boolean = true\n\n  /**\n   * Whether to automatically install a downloaded update on app quit (if `quitAndInstall` was not called before).\n   *\n   * Applicable only on Windows and Linux.\n   */\n  autoInstallOnAppQuit: boolean = true\n\n  /**\n   * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\n   *\n   * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\n   */\n  allowPrerelease: boolean = false\n\n  /**\n   * *GitHub provider only.* Get all release notes (from current version to latest), not just the latest.\n   * @default false\n   */\n  fullChangelog: boolean = false\n\n  /**\n   * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n   * @default false\n   */\n  allowDowngrade: boolean = false\n\n  /**\n   * The current application version.\n   */\n  readonly currentVersion: string\n\n  private _channel: string | null = null\n\n  protected readonly downloadedUpdateHelper: DownloadedUpdateHelper\n\n  /**\n   * Get the update channel. Not applicable for GitHub. Doesn't return `channel` from the update configuration, only if was previously set.\n   */\n  get channel(): string | null {\n    return this._channel\n  }\n\n  /**\n   * Set the update channel. Not applicable for GitHub. Overrides `channel` in the update configuration.\n   *\n   * `allowDowngrade` will be automatically set to `true`. If this behavior is not suitable for you, simple set `allowDowngrade` explicitly after.\n   */\n  set channel(value: string | null) {\n    if (this._channel != null) {\n      if (typeof value !== \"string\") {\n        throw newError(`Channel must be a string, but got: ${value}`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n      else if (value.length === 0) {\n        throw newError(`Channel must be not an empty string`, \"ERR_UPDATER_INVALID_CHANNEL\")\n      }\n    }\n\n    this._channel = value\n    this.allowDowngrade = true\n  }\n\n  /**\n   *  The request headers.\n   */\n  requestHeaders: OutgoingHttpHeaders | null = null\n\n  protected _logger: Logger = console\n\n  /**\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\n   * Set it to `null` if you would like to disable a logging feature.\n   */\n  get logger(): Logger | null {\n    return this._logger\n  }\n\n  set logger(value: Logger | null) {\n    this._logger = value == null ? new NoOpLogger() : value\n  }\n\n  /**\n   * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\n   */\n  readonly signals = new UpdaterSignal(this)\n\n  private _appUpdateConfigPath: string | null = null\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * test only\n   * @private\n   */\n  set updateConfigPath(value: string | null) {\n    this.clientPromise = null\n    this._appUpdateConfigPath = value\n    this.configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n  }\n\n  protected updateAvailable = false\n\n  private clientPromise: Promise<Provider<any>> | null = null\n\n  protected get provider(): Promise<Provider<any>> {\n    return this.clientPromise!!\n  }\n\n  protected readonly stagingUserIdPromise = new Lazy<string>(() => this.getOrCreateStagingUserId())\n\n  // public, allow to read old config for anyone\n  configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\n\n  private readonly untilAppReady: Promise<any>\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null = null\n\n  protected readonly app: Electron.App\n\n  protected updateInfo: UpdateInfo | null = null\n\n  /** @internal */\n  readonly httpExecutor: ElectronHttpExecutor\n\n  protected constructor(options: AllPublishOptions | null | undefined, app?: Electron.App) {\n    super()\n\n    this.on(\"error\", (error: Error) => {\n      this._logger.error(`Error: ${error.stack || error.message}`)\n    })\n\n    if (app != null || (global as any).__test_app != null) {\n      this.app = app || (global as any).__test_app\n      this.untilAppReady = Promise.resolve()\n      this.httpExecutor = null as any\n    }\n    else {\n      this.app = require(\"electron\").app\n      this.httpExecutor = new ElectronHttpExecutor((authInfo, callback) => this.emit(\"login\", authInfo, callback))\n      this.untilAppReady = new Promise(resolve => {\n        if (this.app.isReady()) {\n          resolve()\n        }\n        else {\n          this.app.on(\"ready\", resolve)\n        }\n      })\n    }\n\n    this.downloadedUpdateHelper = new DownloadedUpdateHelper(path.join(this.app.getPath(\"userData\"), \"__update__\"))\n\n    const currentVersionString = this.app.getVersion()\n    const currentVersion = parseVersion(currentVersionString)\n    if (currentVersion == null) {\n      throw newError(`App version is not a valid semver version: \"${currentVersionString}\"`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n    this.currentVersion = currentVersion\n\n    this.allowPrerelease = hasPrereleaseComponents(this.currentVersion)\n\n    if (options != null) {\n      this.setFeedURL(options)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\n  getFeedURL(): string | null | undefined {\n    return \"Deprecated. Do not use it.\"\n  }\n\n  /**\n   * Configure update provider. If value is `string`, [GenericServerOptions](/configuration/publish.md#genericserveroptions) will be set with value as `url`.\n   * @param options If you want to override configuration in the `app-update.yml`.\n   */\n  setFeedURL(options: PublishConfiguration | AllPublishOptions | string) {\n    // https://github.com/electron-userland/electron-builder/issues/1105\n    let provider: Provider<any>\n    if (typeof options === \"string\") {\n      provider = new GenericProvider({provider: \"generic\", url: options}, this, isUrlProbablySupportMultiRangeRequests(options))\n    }\n    else {\n      provider = createClient(options, this)\n    }\n    this.clientPromise = Promise.resolve(provider)\n  }\n\n  /**\n   * Asks the server whether there is an update.\n   */\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\n    if (checkForUpdatesPromise != null) {\n      return checkForUpdatesPromise\n    }\n\n    checkForUpdatesPromise = this._checkForUpdates()\n    this.checkForUpdatesPromise = checkForUpdatesPromise\n    const nullizePromise = () => this.checkForUpdatesPromise = null\n    checkForUpdatesPromise\n      .then(nullizePromise)\n      .catch(nullizePromise)\n    return checkForUpdatesPromise\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return Promise.resolve(null)\n    }\n\n    const checkForUpdatesPromise = this.checkForUpdates()\n    checkForUpdatesPromise\n      .then(it => {\n        const downloadPromise = it.downloadPromise\n        if (downloadPromise == null) {\n          const debug = this._logger.debug\n          if (debug != null) {\n            debug(\"checkForUpdatesAndNotify called, downloadPromise is null\")\n          }\n          return\n        }\n\n        downloadPromise\n          .then(() => {\n            new Notification({\n              title: \"A new update is ready to install\",\n              body: `${this.app.getName()} version ${it.updateInfo.version} is downloaded and will be automatically installed on exit`\n            }).show()\n          })\n      })\n\n    return checkForUpdatesPromise\n  }\n\n  private async isStagingMatch(updateInfo: UpdateInfo): Promise<boolean> {\n    const rawStagingPercentage = updateInfo.stagingPercentage\n    let stagingPercentage = rawStagingPercentage\n    if (stagingPercentage == null) {\n      return true\n    }\n\n    stagingPercentage = parseInt(stagingPercentage as any, 10)\n    if (isNaN(stagingPercentage)) {\n      this._logger.warn(`Staging percentage is NaN: ${rawStagingPercentage}`)\n      return true\n    }\n\n    // convert from user 0-100 to internal 0-1\n    stagingPercentage = stagingPercentage / 100\n\n    const stagingUserId = await this.stagingUserIdPromise.value\n    const val = UUID.parse(stagingUserId).readUInt32BE(12)\n    const percentage = (val / 0xFFFFFFFF)\n    this._logger.info(`Staging percentage: ${stagingPercentage}, percentage: ${percentage}, user id: ${stagingUserId}`)\n    return percentage < stagingPercentage\n  }\n\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\n    try {\n      await this.untilAppReady\n      this._logger.info(\"Checking for update\")\n      this.emit(\"checking-for-update\")\n      return await this.doCheckForUpdates()\n    }\n    catch (e) {\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\n      throw e\n    }\n  }\n\n  private computeFinalHeaders(headers: OutgoingHttpHeaders) {\n    if (this.requestHeaders != null) {\n      Object.assign(headers, this.requestHeaders)\n    }\n    return headers\n  }\n\n  protected async getUpdateInfo(): Promise<UpdateInfo> {\n    await this.untilAppReady\n\n    if (this.clientPromise == null) {\n      this.clientPromise = this.configOnDisk.value.then(it => createClient(it, this))\n    }\n\n    const client = await this.clientPromise\n    const stagingUserId = await this.stagingUserIdPromise.value\n    client.setRequestHeaders(this.computeFinalHeaders({\"x-user-staging-id\": stagingUserId}))\n    return await client.getLatestVersion()\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    const updateInfo = await this.getUpdateInfo()\n\n    const latestVersion = parseVersion(updateInfo.version)\n    if (latestVersion == null) {\n      throw newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: \"${latestVersion}\"`, \"ERR_UPDATER_INVALID_VERSION\")\n    }\n\n    const isStagingMatch = await this.isStagingMatch(updateInfo)\n    if (!isStagingMatch || ((this.allowDowngrade && !hasPrereleaseComponents(latestVersion)) ? isVersionsEqual(latestVersion, this.currentVersion) : !isVersionGreaterThan(latestVersion, this.currentVersion))) {\n      this.updateAvailable = false\n      this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${updateInfo.version}, downgrade is ${this.allowDowngrade ? \"allowed\" : \"disallowed\"}).`)\n      this.emit(\"update-not-available\", updateInfo)\n      return {\n        versionInfo: updateInfo,\n        updateInfo,\n      }\n    }\n\n    this.updateAvailable = true\n    this.updateInfo = updateInfo\n\n    this.onUpdateAvailable(updateInfo)\n\n    const cancellationToken = new CancellationToken()\n    //noinspection ES6MissingAwait\n    return {\n      versionInfo: updateInfo,\n      updateInfo,\n      cancellationToken,\n      downloadPromise: this.autoDownload ? this.downloadUpdate(cancellationToken) : null\n    }\n  }\n\n  protected onUpdateAvailable(updateInfo: UpdateInfo) {\n    this._logger.info(`Found version ${updateInfo.version} (url: ${asArray(updateInfo.files).map(it => it.url).join(\", \")})`)\n    this.emit(\"update-available\", updateInfo)\n  }\n\n  /**\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\n   * @returns {Promise<string>} Path to downloaded file.\n   */\n  async downloadUpdate(cancellationToken: CancellationToken = new CancellationToken()): Promise<any> {\n    const updateInfo = this.updateInfo\n    if (updateInfo == null) {\n      const error = new Error(\"Please check update first\")\n      this.dispatchError(error)\n      throw error\n    }\n\n    this._logger.info(`Downloading update from ${asArray(updateInfo.files).map(it => it.url).join(\", \")}`)\n\n    try {\n      return await this.doDownloadUpdate({\n        updateInfo,\n        requestHeaders: await this.computeRequestHeaders(),\n        cancellationToken,\n      })\n    }\n    catch (e) {\n      this.dispatchError(e)\n      throw e\n    }\n  }\n\n  protected dispatchError(e: Error) {\n    this.emit(\"error\", e, (e.stack || e).toString())\n  }\n\n  protected async abstract doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>>\n\n  /**\n   * Restarts the app and installs the update after it has been downloaded.\n   * It should only be called after `update-downloaded` has been emitted.\n   *\n   * **Note:** `autoUpdater.quitAndInstall()` will close all application windows first and only emit `before-quit` event on `app` after that.\n   * This is different from the normal quit event sequence.\n   *\n   * @param isSilent *windows-only* Runs the installer in silent mode. Defaults to `false`.\n   * @param isForceRunAfter Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.\n   */\n  abstract quitAndInstall(isSilent?: boolean, isForceRunAfter?: boolean): void\n\n  private async loadUpdateConfig() {\n    if (this._appUpdateConfigPath == null) {\n      this._appUpdateConfigPath = isDev ? path.join(this.app.getAppPath(), \"dev-app-update.yml\") : path.join(process.resourcesPath!, \"app-update.yml\")\n    }\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\n  }\n\n  private async computeRequestHeaders(): Promise<OutgoingHttpHeaders> {\n    const fileExtraDownloadHeaders = (await this.provider).fileExtraDownloadHeaders\n    if (fileExtraDownloadHeaders != null) {\n      const requestHeaders = this.requestHeaders\n      return requestHeaders == null ? fileExtraDownloadHeaders : {\n        ...fileExtraDownloadHeaders,\n        ...requestHeaders,\n      }\n    }\n    return this.computeFinalHeaders({accept: \"*/*\"})\n  }\n\n  private async getOrCreateStagingUserId(): Promise<string> {\n    const file = path.join(this.app.getPath(\"userData\"), \".updaterId\")\n    try {\n      const id = await readFile(file, \"utf-8\")\n      if (UUID.check(id)) {\n        return id\n      }\n      else {\n        this._logger.warn(`Staging user id file exists, but content was invalid: ${id}`)\n      }\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)\n      }\n    }\n\n    const id = UUID.v5(randomBytes(4096), UUID.OID)\n    this._logger.info(`Generated new staging user ID: ${id}`)\n    try {\n      await outputFile(file, id)\n    }\n    catch (e) {\n      this._logger.warn(`Couldn't write out staging user ID: ${e}`)\n    }\n    return id\n  }\n\n  get isAddNoCacheQuery(): boolean {\n    const headers = this.requestHeaders\n    // https://github.com/electron-userland/electron-builder/issues/3021\n    return headers == null || (headers.Authorization == null && headers.authorization == null)\n  }\n}\n\nexport interface DownloadUpdateOptions {\n  readonly updateInfo: UpdateInfo\n  readonly requestHeaders: OutgoingHttpHeaders\n  readonly cancellationToken: CancellationToken\n}\n\nfunction hasPrereleaseComponents(version: string) {\n  const versionPrereleaseComponent = getVersionPreleaseComponents(version)\n  return versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0\n}\n\n/** @private */\nexport class NoOpLogger implements Logger {\n  info(message?: any) {\n    // ignore\n  }\n\n  warn(message?: any) {\n    // ignore\n  }\n\n  error(message?: any) {\n    // ignore\n  }\n}\n"],"sourceRoot":""}
