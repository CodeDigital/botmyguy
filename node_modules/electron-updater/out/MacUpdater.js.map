{"version":3,"sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, configureRequestOptionsFromUrl, DigestTransform, newError, ProgressCallbackTransform, RequestHeaders, safeGetHeader, safeStringifyJson } from \"builder-util-runtime\"\nimport { createServer, IncomingMessage, OutgoingHttpHeaders, ServerResponse } from \"http\"\nimport { AddressInfo } from \"net\"\nimport { AppUpdater, DownloadUpdateOptions } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, UPDATE_DOWNLOADED } from \"./main\"\nimport { findFile } from \"./Provider\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: AllPublishOptions) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this._logger.info(`New version ${this.updateInfo!.version} has been downloaded`)\n      this.emit(UPDATE_DOWNLOADED, this.updateInfo)\n    })\n  }\n\n  protected async doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\n    const files = (await this.provider).resolveFiles(downloadUpdateOptions.updateInfo)\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl() {\n      const address = server.address() as AddressInfo\n      return `http://${address.address}:${address.port}`\n    }\n\n    return await new Promise<Array<string>>((resolve, reject) => {\n      server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n        const requestUrl = request.url!\n        this._logger.info(`${requestUrl} requested`)\n        if (requestUrl === \"/\") {\n          const data = Buffer.from(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\n          response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\n          response.end(data)\n        }\n        else if (requestUrl.startsWith(\"/app.zip\")) {\n          const debug = this._logger.debug\n          let errorOccurred = false\n          response.on(\"finish\", () => {\n            try {\n              setImmediate(() => server.close())\n            }\n            finally {\n              if (!errorOccurred) {\n                this.nativeUpdater.removeListener(\"error\", reject)\n                resolve([])\n              }\n            }\n          })\n\n          if (debug != null) {\n            debug(`app.zip requested by Squirrel.Mac, download ${zipFileInfo.url.href}`)\n          }\n          this.doProxyUpdateFile(response, zipFileInfo.url.href, downloadUpdateOptions.requestHeaders, zipFileInfo.info.sha512, downloadUpdateOptions.cancellationToken, error => {\n            errorOccurred = true\n            try {\n              response.writeHead(500)\n              response.end()\n            }\n            finally {\n              this.nativeUpdater.removeListener(\"error\", reject)\n              reject(new Error(`Cannot download \"${zipFileInfo.url}\": ${error}`))\n            }\n          })\n        }\n        else {\n          this._logger.warn(`${requestUrl} requested, but not supported`)\n          response.writeHead(404)\n          response.end()\n        }\n      })\n      server.listen(0, \"127.0.0.1\", 16, () => {\n        this.nativeUpdater.setFeedURL(`${getServerUrl()}`, {\"Cache-Control\": \"no-cache\"})\n\n        this.nativeUpdater.once(\"error\", reject)\n        this.nativeUpdater.checkForUpdates()\n      })\n    })\n  }\n\n  private doProxyUpdateFile(nativeResponse: ServerResponse, url: string, headers: OutgoingHttpHeaders, sha512: string | null, cancellationToken: CancellationToken, errorHandler: (error: Error) => void) {\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptionsFromUrl(url, {headers}), downloadResponse => {\n      const statusCode = downloadResponse.statusCode\n      if (statusCode >= 400) {\n        this._logger.warn(`Request to ${url} failed, status code: ${statusCode}`)\n\n        try {\n          nativeResponse.writeHead(statusCode)\n          nativeResponse.end()\n        }\n        finally {\n          errorHandler(new Error(`Cannot download \"${url}\", status ${statusCode}: ${downloadResponse.statusMessage}`))\n        }\n        return\n      }\n\n      // in tests Electron NET Api is not used, so, we have to handle redirect.\n      const redirectUrl = safeGetHeader(downloadResponse, \"location\")\n      if (redirectUrl != null) {\n        this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n        return\n      }\n\n      const nativeHeaders: RequestHeaders = {\"Content-Type\": \"application/zip\"}\n      const streams: Array<any> = []\n      const downloadListenerCount = this.listenerCount(DOWNLOAD_PROGRESS)\n      this._logger.info(`${DOWNLOAD_PROGRESS} listener count: ${downloadListenerCount}`)\n      if (downloadListenerCount > 0) {\n        const contentLength = safeGetHeader(downloadResponse, \"content-length\")\n        this._logger.info(`contentLength: ${contentLength}`)\n        if (contentLength != null) {\n          nativeHeaders[\"Content-Length\"] = contentLength\n          streams.push(new ProgressCallbackTransform(parseInt(contentLength, 10), cancellationToken, it => this.emit(DOWNLOAD_PROGRESS, it)))\n        }\n      }\n\n      nativeResponse.writeHead(200, nativeHeaders)\n\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\n      if (sha512 != null) {\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\n      }\n\n      streams.push(nativeResponse)\n\n      let lastStream = downloadResponse\n      for (const stream of streams) {\n        stream.on(\"error\", errorHandler)\n        lastStream = lastStream.pipe(stream)\n      }\n    })\n\n    downloadRequest.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\n      if (headers.authorization != null && (headers!!.authorization as string).startsWith(\"token\")) {\n        const parsedNewUrl = new URL(redirectUrl)\n        if (parsedNewUrl.hostname.endsWith(\".amazonaws.com\")) {\n          delete headers.authorization\n        }\n      }\n      this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n    })\n    downloadRequest.on(\"error\", errorHandler)\n    downloadRequest.end()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"],"sourceRoot":""}
