{"version":3,"sources":["../src/GitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, githubUrl, HttpError, HttpExecutor, newError, parseXml, ReleaseNoteInfo, UpdateInfo, XElement } from \"builder-util-runtime\"\nimport * as semver from \"semver\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { getChannelFilename, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nconst hrefRegExp = /\\/tag\\/v?([^\\/]+)$/\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: URL\n  protected readonly baseApiUrl: URL\n\n  protected constructor(protected readonly options: GithubOptions, defaultHost: string, executor: HttpExecutor<any>) {\n    super(executor, false /* because GitHib uses S3 */)\n\n    this.baseUrl = newBaseUrl(githubUrl(options, defaultHost))\n    const apiHost = defaultHost === \"github.com\" ? \"api.github.com\" : defaultHost\n    this.baseApiUrl = newBaseUrl(githubUrl(options, apiHost))\n  }\n\n  protected computeGithubBasePath(result: string) {\n    // https://github.com/electron-userland/electron-builder/issues/1903#issuecomment-320881211\n    const host = this.options.host\n    return host != null && host !== \"github.com\" && host !== \"api.github.com\" ? `/api/v3${result}` : result\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions, private readonly updater: AppUpdater, executor: HttpExecutor<any>) {\n    super(options, \"github.com\", executor)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const cancellationToken = new CancellationToken()\n\n    const feedXml: string = (await this.httpRequest(newUrlFromBase(`${this.basePath}.atom`, this.baseUrl), {\n      accept: \"application/xml, application/atom+xml, text/xml, */*\",\n    }, cancellationToken))!\n\n    const feed = parseXml(feedXml)\n    let latestRelease = feed.element(\"entry\", false, `No published versions on GitHub`)\n    let version: string | null\n    try {\n      if (this.updater.allowPrerelease) {\n        // noinspection TypeScriptValidateJSTypes\n        version = latestRelease.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1]\n      }\n      else {\n        version = await this.getLatestVersionString(cancellationToken)\n        for (const element of feed.getElements(\"entry\")) {\n          if (element.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1] === version) {\n            latestRelease = element\n            break\n          }\n        }\n\n      }\n    }\n    catch (e) {\n      throw newError(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`, \"ERR_UPDATER_INVALID_RELEASE_FEED\")\n    }\n\n    if (version == null) {\n      throw newError(`No published versions on GitHub`, \"ERR_UPDATER_NO_PUBLISHED_VERSIONS\")\n    }\n\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const channelFileUrl = newUrlFromBase(this.getBaseDownloadPath(version, channelFile), this.baseUrl)\n    const requestOptions = this.createRequestOptions(channelFileUrl)\n    let rawData: string\n    try {\n      rawData = (await this.executor.request(requestOptions, cancellationToken))!!\n    }\n    catch (e) {\n      if (!this.updater.allowPrerelease && e instanceof HttpError && e.statusCode === 404) {\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n      throw e\n    }\n\n    const result = parseUpdateInfo(rawData, channelFile, channelFileUrl)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = `${githubUrl(this.options)}/${requestOptions.path}`\n    }\n\n    if (result.releaseName == null) {\n      result.releaseName = latestRelease.elementValueOrEmpty(\"title\")\n    }\n\n    if (result.releaseNotes == null) {\n      result.releaseNotes = computeReleaseNotes(this.updater.currentVersion, this.updater.fullChangelog, feed, latestRelease)\n    }\n    return result\n  }\n\n  private async getLatestVersionString(cancellationToken: CancellationToken): Promise<string | null> {\n    const options = this.options\n    // do not use API for GitHub to avoid limit, only for custom host or GitHub Enterprise\n    const url = (options.host == null || options.host === \"github.com\") ?\n      newUrlFromBase(`${this.basePath}/latest`, this.baseUrl) :\n      new URL(`${this.computeGithubBasePath(`/repos/${options.owner}/${options.repo}/releases`)}/latest`, this.baseApiUrl)\n    try {\n      const rawData = await this.httpRequest(url, {Accept: \"application/json\"}, cancellationToken)\n      if (rawData == null) {\n        return null\n      }\n\n      const releaseInfo: GithubReleaseInfo = JSON.parse(rawData)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n    }\n  }\n\n  private get basePath() {\n    return `/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    // still replace space to - due to backward compatibility\n    return resolveFiles(updateInfo, this.baseUrl, p => this.getBaseDownloadPath(updateInfo.version, p.replace(/ /g, \"-\")))\n  }\n\n  private getBaseDownloadPath(version: string, fileName: string) {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}\n\nfunction getNoteValue(parent: XElement): string {\n  const result = parent.elementValueOrEmpty(\"content\")\n  // GitHub reports empty notes as <content>No content.</content>\n  return result === \"No content.\" ? \"\" : result\n}\n\nexport function computeReleaseNotes(currentVersion: string, isFullChangelog: boolean, feed: XElement, latestRelease: any) {\n  if (!isFullChangelog) {\n    return getNoteValue(latestRelease)\n  }\n\n  const releaseNotes: Array<ReleaseNoteInfo> = []\n  for (const release of feed.getElements(\"entry\")) {\n    // noinspection TypeScriptValidateJSTypes\n    const versionRelease = release.element(\"link\").attribute(\"href\").match(/\\/tag\\/v?([^\\/]+)$/)![1]\n    if (semver.lt(currentVersion, versionRelease)) {\n      releaseNotes.push({\n        version: versionRelease,\n        note: getNoteValue(release)\n      })\n    }\n  }\n  return releaseNotes\n    .sort((a, b) => semver.rcompare(a.version, b.version))\n}\n"],"sourceRoot":""}
