{"version":3,"sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, PackageFileInfo, ProgressInfo, UpdateFileInfo, UpdateInfo } from \"builder-util-runtime\"\nimport { EventEmitter } from \"events\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { LoginCallback } from \"./electronHttpExecutor\"\n\nexport { AppUpdater, NoOpLogger } from \"./AppUpdater\"\nexport { UpdateInfo }\nexport { CancellationToken } from \"builder-util-runtime\"\nexport { Provider } from \"./providers/Provider\"\n\n// autoUpdater to mimic electron bundled autoUpdater\nlet _autoUpdater: any\n\n// required for jsdoc\nexport declare const autoUpdater: AppUpdater\n\nfunction _load_autoUpdater(): AppUpdater {\n  // tslint:disable:prefer-conditional-expression\n  if (process.platform === \"win32\") {\n    _autoUpdater = new (require(\"./NsisUpdater\").NsisUpdater)()\n  }\n  else if (process.platform === \"darwin\") {\n    _autoUpdater = new (require(\"./MacUpdater\").MacUpdater)()\n  }\n  else {\n    _autoUpdater = new (require(\"./AppImageUpdater\").AppImageUpdater)()\n  }\n  return _autoUpdater\n}\n\nObject.defineProperty(exports, \"autoUpdater\", {\n  enumerable: true,\n  get: () => {\n    return _autoUpdater || _load_autoUpdater()\n  }\n})\n\nexport interface ResolvedUpdateFileInfo {\n  readonly url: URL\n  readonly info: UpdateFileInfo\n\n  packageInfo?: PackageFileInfo\n}\n\n// due to historical reasons for windows we use channel name without platform specifier\nexport function getDefaultChannelName() {\n  return `latest${getChannelFilePrefix()}`\n}\n\nfunction getChannelFilePrefix() {\n  const currentPlatform = getCurrentPlatform()\n  if (currentPlatform === \"linux\") {\n    const arch = process.env.TEST_UPDATER_ARCH || process.arch\n    const archSuffix = arch === \"x64\" ? \"\" : `-${arch}`\n    return \"-linux\" + archSuffix\n  }\n  else {\n    return currentPlatform === \"darwin\" ? \"-mac\" : \"\"\n  }\n}\n\nexport function getCustomChannelName(channel: string) {\n  return `${channel}${getChannelFilePrefix()}`\n}\n\nexport function getCurrentPlatform() {\n  return process.env.TEST_UPDATER_PLATFORM || process.platform\n}\n\nexport function isUseOldMacProvider() {\n  // getCurrentPlatform() === \"darwin\"\n  return false\n}\n\nexport function getChannelFilename(channel: string) {\n  return `${channel}.yml`\n}\n\nexport interface UpdateCheckResult {\n  readonly updateInfo: UpdateInfo\n\n  readonly downloadPromise?: Promise<Array<string>> | null\n\n  readonly cancellationToken?: CancellationToken\n\n  /** @deprecated */\n  readonly versionInfo: UpdateInfo\n}\n\nexport type UpdaterEvents = \"login\" | \"checking-for-update\" | \"update-available\" | \"update-cancelled\" | \"download-progress\" | \"update-downloaded\" | \"error\"\n\nexport const DOWNLOAD_PROGRESS: UpdaterEvents = \"download-progress\"\nexport const UPDATE_DOWNLOADED: UpdaterEvents = \"update-downloaded\"\n\nexport type LoginHandler = (authInfo: any, callback: LoginCallback) => void\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {\n  }\n\n  /**\n   * Emitted when an authenticating proxy is [asking for user credentials](https://github.com/electron/electron/blob/master/docs/api/client-request.md#event-login).\n   */\n  login(handler: LoginHandler) {\n    addHandler(this.emitter, \"login\", handler)\n  }\n\n  progress(handler: (info: ProgressInfo) => void) {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler)\n  }\n\n  updateDownloaded(handler: (info: UpdateInfo) => void) {\n    addHandler(this.emitter, UPDATE_DOWNLOADED, handler)\n  }\n\n  updateCancelled(handler: (info: UpdateInfo) => void) {\n    addHandler(this.emitter, \"update-cancelled\", handler)\n  }\n}\n\nconst isLogEvent = false\n\nfunction addHandler(emitter: EventEmitter, event: UpdaterEvents, handler: (...args: Array<any>) => void) {\n  if (isLogEvent) {\n    emitter.on(event, (...args: Array<any>) => {\n      console.log(\"%s %s\", event, args)\n      handler.apply(null, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}\n\nexport interface Logger {\n  info(message?: any): void\n\n  warn(message?: any): void\n\n  error(message?: any): void\n\n  debug?(message: string): void\n}\n\n// if baseUrl path doesn't ends with /, this path will be not prepended to passed pathname for new URL(input, base)\n/** @internal */\nexport function newBaseUrl(url: string) {\n  const result = new URL(url)\n  if (!result.pathname.endsWith(\"/\")) {\n    result.pathname += \"/\"\n  }\n  return result\n}\n\n// addRandomQueryToAvoidCaching is false by default because in most cases URL already contains version number,\n// so, it makes sense only for Generic Provider for channel files\nexport function newUrlFromBase(pathname: string, baseUrl: URL, addRandomQueryToAvoidCaching: boolean = false): URL {\n  const result = new URL(pathname, baseUrl)\n  // search is not propagated (search is an empty string if not specified)\n  const search = baseUrl.search\n  if (search != null && search.length !== 0) {\n    result.search = search\n  }\n  else if (addRandomQueryToAvoidCaching) {\n    result.search = `noCache=${Date.now().toString(32)}`\n  }\n  return result\n}\n"],"sourceRoot":""}
