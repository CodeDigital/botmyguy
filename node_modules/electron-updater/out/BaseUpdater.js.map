{"version":3,"sources":["../src/BaseUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationError, DownloadOptions, UpdateInfo } from \"builder-util-runtime\"\nimport { ensureDir, rename, unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED } from \"./main\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  protected constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\n    if (isInstalled) {\n      setImmediate(() => {\n        if (this.app.quit !== undefined) {\n          this.app.quit()\n        }\n      })\n    } else {\n      this.quitAndInstallCalled = false\n    }\n  }\n\n  protected async executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      taskOptions.downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    const updateInfo = taskOptions.updateInfo\n    const version = updateInfo.version\n    const fileInfo = taskOptions.fileInfo\n    const packageInfo = fileInfo.packageInfo\n\n    function getCacheUpdateFileName(): string {\n      // bloody NodeJS URL doesn't decode automatically\n      const urlPath = decodeURIComponent(taskOptions.fileInfo.url.pathname)\n      if (urlPath.endsWith(`.${taskOptions.fileExtension}`)) {\n        return path.posix.basename(urlPath)\n      }\n      else {\n        // url like /latest, generate name\n        return `update.${taskOptions.fileExtension}`\n      }\n    }\n\n    const cacheDir = this.downloadedUpdateHelper.cacheDir\n    await ensureDir(cacheDir)\n    const updateFileName = getCacheUpdateFileName()\n    let updateFile = path.join(cacheDir, updateFileName)\n    const packageFile = packageInfo == null ? null : path.join(cacheDir, `package-${version}${path.extname(packageInfo.path) || \".7z\"}`)\n\n    const done = async (isSaveCache: boolean) => {\n      this.downloadedUpdateHelper.setDownloadedFile(updateFile, packageFile, updateInfo, fileInfo)\n      if (isSaveCache) {\n        await this.downloadedUpdateHelper.cacheUpdateInfo(updateFileName)\n      }\n\n      this.addQuitHandler()\n      this.emit(UPDATE_DOWNLOADED, updateInfo)\n      return packageFile == null ? [updateFile] : [updateFile, packageFile]\n    }\n\n    const log = this._logger\n    const cachedUpdateFile = await this.downloadedUpdateHelper.validateDownloadedPath(updateFile, updateInfo, fileInfo, log)\n    if (cachedUpdateFile != null) {\n      updateFile = cachedUpdateFile\n      return await done(false)\n    }\n\n    const removeFileIfAny = async () => {\n      await this.downloadedUpdateHelper.clear()\n        .catch(() => {\n          // ignore\n        })\n      return await unlink(updateFile)\n        .catch(() => {\n          // ignore\n        })\n    }\n\n    // https://github.com/electron-userland/electron-builder/pull/2474#issuecomment-366481912\n    let nameCounter = 0\n    let tempUpdateFile = path.join(cacheDir, `temp-${updateFileName}`)\n    for (let i = 0; i < 3; i++) {\n      try {\n        await unlink(tempUpdateFile)\n      }\n      catch (e) {\n        if (e.code === \"ENOENT\") {\n          break\n        }\n\n        log.warn(`Error on remove temp update file: ${e}`)\n        tempUpdateFile = path.join(cacheDir, `temp-${nameCounter++}-${updateFileName}`)\n      }\n    }\n\n    try {\n      await taskOptions.task(tempUpdateFile, packageFile, removeFileIfAny)\n      await rename(tempUpdateFile, updateFile)\n    }\n    catch (e) {\n      await removeFileIfAny()\n\n      if (e instanceof CancellationError) {\n        log.info(\"Cancelled\")\n        this.emit(\"update-cancelled\", updateInfo)\n      }\n      throw e\n    }\n\n    log.info(`New version ${version} has been downloaded to ${updateFile}`)\n    return await done(true)\n  }\n\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  protected async install(isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    // todo check (for now it is ok to no check as before, cached (from previous launch) update file checked in any case)\n    // const isValid = await this.isUpdateValid(installerPath)\n    if (installerPath == null) {\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.once(\"quit\", async () => {\n      if (!this.quitAndInstallCalled) {\n        this._logger.info(\"Auto install update on quit\")\n        await this.install(true, false)\n      } else {\n        this._logger.info(\"Update installer has already been triggered. Quitting application.\")\n      }\n    })\n  }\n}\n\nexport interface DownloadExecutorTask {\n  readonly fileExtension: string\n  readonly downloadOptions: DownloadOptions\n  readonly fileInfo: ResolvedUpdateFileInfo\n  readonly updateInfo: UpdateInfo\n  readonly task: (destinationFile: string, packageFile: string | null, removeTempDirIfAny: () => Promise<any>) => Promise<any>\n}\n"],"sourceRoot":""}
