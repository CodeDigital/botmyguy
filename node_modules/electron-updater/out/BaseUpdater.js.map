{"version":3,"sources":["../src/BaseUpdater.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAgB,WAAhB,SAAoC,wBAApC,CAA8C;AAIlD,EAAA,WAAA,CAAsB,OAAtB,EAA0D,GAA1D,EAAmE;AACjE,UAAM,OAAN,EAAe,GAAf;AAJQ,SAAA,oBAAA,GAAuB,KAAvB;AACF,SAAA,gBAAA,GAAmB,KAAnB;AAIP;;AAEK,EAAA,cAAN,CAAqB,QAAA,GAAoB,KAAzC,EAAgD,eAAA,GAA2B,KAA3E,EAAgF;AAAA;;AAAA;AAC9E,MAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,oCAAlB;;AACA,YAAM,WAAW,GAAG,MAAM,KAAI,CAAC,OAAL,CAAa,QAAb,EAAuB,QAAQ,GAAG,eAAH,GAAqB,IAApD,CAA1B;;AACA,UAAI,WAAJ,EAAiB;AACf,QAAA,YAAY,CAAC,MAAK;AAChB,cAAI,KAAI,CAAC,GAAL,CAAS,IAAT,KAAkB,SAAtB,EAAiC;AAC/B,YAAA,KAAI,CAAC,GAAL,CAAS,IAAT;AACD;AACF,SAJW,CAAZ;AAKD,OAND,MAOK;AACH,QAAA,KAAI,CAAC,oBAAL,GAA4B,KAA5B;AACD;AAZ6E;AAa/E;;AAES,EAAA,eAAe,CAAC,WAAD,EAAkC;AAAA;;AACzD,WAAO,MAAM,eAAN,CAAqB,MAAA,CAAA,MAAA,CAAA,EAAA,EACvB,WADuB,EACZ;AACd,MAAA,IAAI;AAAA,iDAAE,aAAW;AACf,UAAA,MAAI,CAAC,cAAL;AACD,SAFG;;AAAA;AAAA;AAAA;AAAA;AADU,KADY,CAArB,CAAP;AAMD;;AAIe,EAAA,OAAN,CAAc,QAAd,EAAiC,UAAjC,EAAoD;AAAA;;AAAA;AAC5D,UAAI,MAAI,CAAC,oBAAT,EAA+B;AAC7B,QAAA,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,2DAAlB;;AACA,eAAO,KAAP;AACD;;AAED,YAAM,aAAa,GAAG,MAAI,CAAC,sBAAL,CAA4B,IAAlD,CAN4D,CAO5D;AACA;;AACA,UAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,QAAA,MAAI,CAAC,aAAL,CAAmB,IAAI,KAAJ,CAAU,mDAAV,CAAnB;;AACA,eAAO,KAAP;AACD,OAZ2D,CAc5D;;;AACA,MAAA,MAAI,CAAC,oBAAL,GAA4B,IAA5B;;AAEA,UAAI;AACF,QAAA,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,sBAAsB,QAAQ,iBAAiB,UAAU,EAA3E;;AACA,eAAO,MAAI,CAAC,SAAL,CAAe,aAAf,EAA8B,QAA9B,EAAwC,UAAxC,CAAP;AACD,OAHD,CAIA,OAAO,CAAP,EAAU;AACR,QAAA,MAAI,CAAC,aAAL,CAAmB,CAAnB;;AACA,eAAO,KAAP;AACD;AAxB2D;AAyB7D;;AAES,EAAA,cAAc,GAAA;AAAA;;AACtB,QAAI,KAAK,gBAAL,IAAyB,CAAC,KAAK,oBAAnC,EAAyD;AACvD;AACD;;AAED,SAAK,gBAAL,GAAwB,IAAxB;AAEA,SAAK,GAAL,CAAS,IAAT,CAAc,MAAd,gCAAsB,aAAW;AAC/B,UAAI,CAAC,MAAI,CAAC,oBAAV,EAAgC;AAC9B,QAAA,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,6BAAlB;;AACA,cAAM,MAAI,CAAC,OAAL,CAAa,IAAb,EAAmB,KAAnB,CAAN;AACD,OAHD,MAIK;AACH,QAAA,MAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,oEAAlB;AACD;AACF,KARD;AASD;;AA7EiD,C","sourcesContent":["import { AllPublishOptions } from \"builder-util-runtime\"\nimport { AppUpdater, DownloadExecutorTask } from \"./AppUpdater\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  protected constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\n    if (isInstalled) {\n      setImmediate(() => {\n        if (this.app.quit !== undefined) {\n          this.app.quit()\n        }\n      })\n    }\n    else {\n      this.quitAndInstallCalled = false\n    }\n  }\n\n  protected executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    return super.executeDownload({\n      ...taskOptions,\n      done: async () => {\n        this.addQuitHandler()\n      }\n    })\n  }\n\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  protected async install(isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    // todo check (for now it is ok to no check as before, cached (from previous launch) update file checked in any case)\n    // const isValid = await this.isUpdateValid(installerPath)\n    if (installerPath == null) {\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.once(\"quit\", async () => {\n      if (!this.quitAndInstallCalled) {\n        this._logger.info(\"Auto install update on quit\")\n        await this.install(true, false)\n      }\n      else {\n        this._logger.info(\"Update installer has already been triggered. Quitting application.\")\n      }\n    })\n  }\n}"],"sourceRoot":""}
