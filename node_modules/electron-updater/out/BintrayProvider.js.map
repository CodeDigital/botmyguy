{"version":3,"sources":["../src/BintrayProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAA,eAAA,SAA+B,gBAA/B,CAAmD;AAIvD,cAAY,aAAZ,EAA2C,YAA3C,EAA0E;AACxE,UAAM,YAAN;AAEA,SAAK,MAAL,GAAc,KAAI,wBAAJ,EAAkB,aAAlB,EAAiC,YAAjC,EAA+C,KAAI,uCAAJ,GAA/C,CAAd;AACA,SAAK,OAAL,GAAe,wBAAW,0BAA0B,KAAK,MAAL,CAAY,KAAK,IAAI,KAAK,MAAL,CAAY,IAAI,EAA1E,CAAf;AACD;;AAED,oBAAkB,KAAlB,EAA4B;AAC1B,UAAM,iBAAN,CAAwB,KAAxB;AACA,SAAK,MAAL,CAAY,iBAAZ,CAA8B,KAA9B;AACD;;AAEK,kBAAN,GAAsB;AAAA;;AAAA;AACpB,UAAI;AACF,cAAM,OAAO,MAAM,MAAK,MAAL,CAAY,UAAZ,CAAuB,SAAvB,CAAnB;AACA,cAAM,kBAAkB,gCAAmB,oCAAnB,CAAxB;AACA,cAAM,QAAQ,MAAM,MAAK,MAAL,CAAY,eAAZ,CAA4B,KAAK,IAAjC,CAApB;AACA,cAAM,cAAc,MAAM,IAAN,CAAW,MAAM,GAAG,IAAH,CAAQ,QAAR,CAAiB,IAAI,eAAe,EAApC,KAA2C,GAAG,IAAH,CAAQ,QAAR,CAAiB,IAAI,eAAe,EAApC,CAA5D,CAApB;;AACA,YAAI,eAAe,IAAnB,EAAyB;AACvB;AACA,gBAAM,oCAAS,6BAA6B,eAAe,uBAAuB,MAAM,GAAN,CAAU,MAAM,KAAK,SAAL,CAAe,EAAf,EAAmB,IAAnB,EAAyB,CAAzB,CAAhB,EAA6C,IAA7C,CAAkD,KAAlD,CAAwD,EAApI,EAAwI,oCAAxI,CAAN;AACD;;AAED,cAAM,iBAAiB,KAAI,UAAJ,EAAQ,0BAA0B,MAAK,MAAL,CAAY,KAAK,IAAI,MAAK,MAAL,CAAY,IAAI,IAAI,YAAY,IAAI,EAA3F,CAAvB;AACA,eAAO,kCAAgB,MAAM,MAAK,WAAL,CAAiB,cAAjB,CAAtB,GAAwD,eAAxD,EAAyE,cAAzE,CAAP;AACD,OAZD,CAaA,OAAO,CAAP,EAAU;AACR,YAAI,gBAAgB,CAAhB,IAAqB,EAAE,UAAF,KAAiB,GAA1C,EAA+C;AAC7C,gBAAM,oCAAS,kIAAkI,EAAE,KAAF,IAAW,EAAE,OAAO,EAA/J,EAAmK,sCAAnK,CAAN;AACD;;AACD,cAAM,CAAN;AACD;AAnBmB;AAoBrB;;AAED,eAAa,UAAb,EAAmC;AACjC,WAAO,8BAAa,UAAb,EAAyB,KAAK,OAA9B,CAAP;AACD;;AAxCsD","sourcesContent":["import { BintrayOptions, CancellationToken, HttpExecutor, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { BintrayClient } from \"builder-util-runtime/out/bintray\"\nimport { URL } from \"url\"\nimport { getChannelFilename, getDefaultChannelName, newBaseUrl, Provider, ResolvedUpdateFileInfo } from \"./main\"\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\n\nexport class BintrayProvider extends Provider<UpdateInfo> {\n  private client: BintrayClient\n  private readonly baseUrl: URL\n\n  constructor(configuration: BintrayOptions, httpExecutor: HttpExecutor<any>) {\n    super(httpExecutor)\n\n    this.client = new BintrayClient(configuration, httpExecutor, new CancellationToken())\n    this.baseUrl = newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)\n  }\n\n  setRequestHeaders(value: any): void {\n    super.setRequestHeaders(value)\n    this.client.setRequestHeaders(value)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      const channelFilename = getChannelFilename(getDefaultChannelName())\n      const files = await this.client.getVersionFiles(data.name)\n      const channelFile = files.find(it => it.name.endsWith(`_${channelFilename}`) || it.name.endsWith(`-${channelFilename}`))\n      if (channelFile == null) {\n        // noinspection ExceptionCaughtLocallyJS\n        throw newError(`Cannot find channel file \"${channelFilename}\", existing files:\\n${files.map(it => JSON.stringify(it, null, 2)).join(\",\\n\")}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n\n      const channelFileUrl = new URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${channelFile.name}`)\n      return parseUpdateInfo(await this.httpRequest(channelFileUrl), channelFilename, channelFileUrl)\n    }\n    catch (e) {\n      if (\"statusCode\" in e && e.statusCode === 404) {\n        throw newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n      }\n      throw e\n    }\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"],"sourceRoot":""}
