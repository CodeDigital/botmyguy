{"version":3,"sources":["../../src/differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAA,8CAAA,SAA8D,gDAA9D,CAAoF;AAClF,UAAN,GAAc;AAAA;;AAAA;AACZ,YAAM,cAAc,MAAK,kBAAzB;AACA,YAAM,WAAW,YAAY,IAA7B;AACA,YAAM,SAAS,YAAY,YAAY,YAAZ,GAA6B,CAAzC,CAAf;AACA,YAAK,kBAAL,GAA0B,MAAM,MAAK,eAAL,CAAqB,MAArB,EAA6B,WAAW,CAAxC,CAAhC;AACA,YAAM,cAAc,MAAM,4CAAa,MAAK,kBAAL,CAAwB,KAAxB,CAA8B,CAA9B,EAAiC,MAAK,kBAAL,CAAwB,MAAxB,GAAiC,CAAlE,CAAb,CAA1B;AACA,YAAM,MAAK,UAAL,CAAgB,KAAK,KAAL,EAAW,MAAM,6CAAyB,MAAK,OAAL,CAAa,OAAtC,CAAjB,EAAhB,EAAkF,WAAlF,CAAN;AANY;AAOb;;AARuF","sourcesContent":["import { readEmbeddedBlockMapData } from \"builder-util-runtime/out/blockMapApi\"\nimport { DifferentialDownloader, readBlockMap } from \"./DifferentialDownloader\"\n\nexport class FileWithEmbeddedBlockMapDifferentialDownloader extends DifferentialDownloader {\n  async download() {\n    const packageInfo = this.blockAwareFileInfo\n    const fileSize = packageInfo.size!!\n    const offset = fileSize - (packageInfo.blockMapSize!! + 4)\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, fileSize - 1)\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(0, this.fileMetadataBuffer.length - 4))\n    await this.doDownload(JSON.parse(await readEmbeddedBlockMapData(this.options.oldFile)), newBlockMap)\n  }\n}"],"sourceRoot":""}
