{"version":3,"sources":["../../src/differentialDownloader/downloadPlanBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockMap, BlockMapFile } from \"builder-util-runtime/out/blockMapApi\"\nimport { Logger } from \"../main\"\n\nexport enum OperationKind {\n  COPY, DOWNLOAD\n}\n\nexport interface Operation {\n  kind: OperationKind\n\n  start: number\n  end: number\n}\n\nexport function computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap, logger: Logger) {\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\n\n  const oldEntryMap = buildEntryMap(oldBlockMap.files)\n\n  let lastOperation: Operation | null = null\n\n  const operations: Array<Operation> = []\n  for (const blockMapFile of newBlockMap.files) {\n    const name = blockMapFile.name\n    const oldEntry = oldEntryMap.get(name)\n    if (oldEntry == null) {\n      // new file\n      operations.push({\n        kind: OperationKind.DOWNLOAD,\n        start: blockMapFile.offset,\n        end: blockMapFile.offset + blockMapFile.sizes.reduce((accumulator, currentValue) => accumulator + currentValue),\n      })\n      continue\n    }\n\n    const newFile = nameToNewBlocks.get(name)!!\n    let changedBlockCount = 0\n\n    const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset)\n\n    let newOffset = blockMapFile.offset\n    for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\n      const blockSize = newFile.sizes[i]\n      const checksum = newFile.checksums[i]\n      let oldOffset: number | null | undefined = checksumToOldOffset.get(checksum)\n      if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\n        logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\n        oldOffset = null\n      }\n\n      if (oldOffset == null) {\n        changedBlockCount++\n\n        if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD || lastOperation.end !== newOffset) {\n          lastOperation = {\n            kind: OperationKind.DOWNLOAD,\n            start: newOffset,\n            end: newOffset + blockSize,\n          }\n          operations.push(lastOperation)\n        }\n        else {\n          lastOperation.end += blockSize\n        }\n      }\n      else if (lastOperation == null || lastOperation.kind !== OperationKind.COPY || lastOperation.end !== oldOffset) {\n        lastOperation = {\n          kind: OperationKind.COPY,\n          start: oldOffset,\n          end: oldOffset + blockSize,\n        }\n        operations.push(lastOperation)\n      }\n      else {\n        lastOperation.end += blockSize\n      }\n    }\n\n    if (changedBlockCount > 0) {\n      logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\n    }\n  }\n  return operations\n}\n\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number) {\n  const checksumToOffset = new Map<string, number>()\n  const checksumToSize = new Map<string, number>()\n  let offset = fileOffset\n  for (let i = 0; i < file.checksums.length; i++) {\n    const checksum = file.checksums[i]\n    const size = file.sizes[i]\n    checksumToOffset.set(checksum, offset)\n    checksumToSize.set(checksum, size)\n    offset += size\n  }\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\n}\n\nfunction buildEntryMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}"],"sourceRoot":""}
