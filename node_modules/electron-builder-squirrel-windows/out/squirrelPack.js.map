{"version":3,"sources":["../src/squirrelPack.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport { Arch, debug, exec, execWine, log, prepareWindowsExecutableArgs as prepareArgs, spawn } from \"builder-util\"\nimport { copyFile, walk } from \"builder-util/out/fs\"\nimport { compute7zCompressArgs } from \"electron-builder-lib/out/targets/archive\"\nimport { WinPackager } from \"electron-builder-lib/out/winPackager\"\nimport { createWriteStream, ensureDir, remove, stat, unlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nconst archiver = require(\"archiver\")\n\nexport function convertVersion(version: string): string {\n  const parts = version.split(\"-\")\n  const mainVersion = parts.shift()\n  if (parts.length > 0) {\n    return [mainVersion, parts.join(\"-\").replace(/\\./g, \"\")].join(\"-\")\n  }\n  else {\n    return mainVersion!\n  }\n}\n\nfunction syncReleases(outputDirectory: string, options: SquirrelOptions) {\n  log.info(\"syncing releases to build delta package\")\n  const args = prepareArgs([\"-u\", options.remoteReleases!, \"-r\", outputDirectory], path.join(options.vendorPath, \"SyncReleases.exe\"))\n  if (options.remoteToken) {\n    args.push(\"-t\", options.remoteToken)\n  }\n  return spawn(process.platform === \"win32\" ? path.join(options.vendorPath, \"SyncReleases.exe\") : \"mono\", args)\n}\n\nexport interface SquirrelOptions {\n  vendorPath: string\n  remoteReleases?: string\n  remoteToken?: string\n  loadingGif?: string\n  productName: string\n  appId?: string\n  name: string\n  packageCompressionLevel?: number\n  version: string\n  msi?: any\n\n  description?: string\n  iconUrl?: string\n  authors?: string\n  extraMetadataSpecs?: string\n  copyright?: string\n}\n\nexport interface OutFileNames {\n  setupFile: string\n  packageFile: string\n}\n\nexport class SquirrelBuilder {\n  constructor(private readonly options: SquirrelOptions, private readonly outputDirectory: string, private readonly packager: WinPackager) {\n  }\n\n  async buildInstaller(outFileNames: OutFileNames, appOutDir: string, outDir: string, arch: Arch) {\n    const packager = this.packager\n    const dirToArchive = await packager.info.tempDirManager.createTempDir({prefix: \"squirrel-windows\"})\n    const outputDirectory = this.outputDirectory\n    const options = this.options\n    const appUpdate = path.join(dirToArchive, \"Update.exe\")\n    await Promise.all([\n      copyFile(path.join(options.vendorPath, \"Update.exe\"), appUpdate)\n        .then(() => packager.sign(appUpdate)),\n      Promise.all([remove(`${outputDirectory.replace(/\\\\/g, \"/\")}/*-full.nupkg`), remove(path.join(outputDirectory, \"RELEASES\"))])\n        .then(() => ensureDir(outputDirectory))\n    ])\n\n    if (options.remoteReleases) {\n      await syncReleases(outputDirectory, options)\n    }\n\n    const version = convertVersion(options.version)\n    const nupkgPath = path.join(outputDirectory, outFileNames.packageFile)\n    const setupPath = path.join(outputDirectory, outFileNames.setupFile)\n\n    await Promise.all<any>([\n      pack(options, appOutDir, appUpdate, nupkgPath, version, packager),\n      copyFile(path.join(options.vendorPath, \"Setup.exe\"), setupPath),\n      copyFile(options.loadingGif ? path.resolve(packager.projectDir, options.loadingGif) : path.join(options.vendorPath, \"install-spinner.gif\"), path.join(dirToArchive, \"background.gif\")),\n    ])\n\n    // releasify can be called only after pack nupkg and nupkg must be in the final output directory (where other old version nupkg can be located)\n    await this.releasify(nupkgPath, outFileNames.packageFile)\n      .then(it => writeFile(path.join(dirToArchive, \"RELEASES\"), it))\n\n    const embeddedArchiveFile = await this.createEmbeddedArchiveFile(nupkgPath, dirToArchive)\n\n    await execWine(path.join(options.vendorPath, \"WriteZipToSetup.exe\"), [setupPath, embeddedArchiveFile])\n\n    await packager.signAndEditResources(setupPath, arch, outDir)\n    if (options.msi && process.platform === \"win32\") {\n      const outFile = outFileNames.setupFile.replace(\".exe\", \".msi\")\n      await msi(options, nupkgPath, setupPath, outputDirectory, outFile)\n      // rcedit can only edit .exe resources\n      await packager.sign(path.join(outputDirectory, outFile))\n    }\n  }\n\n  private async releasify(nupkgPath: string, packageName: string) {\n    const args = [\n      \"--releasify\", nupkgPath,\n      \"--releaseDir\", this.outputDirectory\n    ]\n    const out = (await exec(process.platform === \"win32\" ? path.join(this.options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(this.options.vendorPath, \"Update-Mono.exe\")))).trim()\n    if (debug.enabled) {\n      debug(`Squirrel output: ${out}`)\n    }\n\n    const lines = out.split(\"\\n\")\n    for (let i = lines.length - 1; i > -1; i--) {\n      const line = lines[i]\n      if (line.includes(packageName)) {\n        return line.trim()\n      }\n    }\n\n    throw new Error(`Invalid output, cannot find last release entry, output: ${out}`)\n  }\n\n  private async createEmbeddedArchiveFile(nupkgPath: string, dirToArchive: string) {\n    const embeddedArchiveFile = await this.packager.getTempFile(\"setup.zip\")\n    await exec(path7za, compute7zCompressArgs(\"zip\", {\n      isRegularFile: true,\n      compression: this.packager.compression,\n    }).concat(embeddedArchiveFile, \".\"), {\n      cwd: dirToArchive,\n    })\n    await exec(path7za, compute7zCompressArgs(\"zip\", {\n      isRegularFile: true,\n      compression: \"store\" /* nupkg is already compressed */,\n    }).concat(embeddedArchiveFile, nupkgPath))\n    return embeddedArchiveFile\n  }\n}\n\nasync function pack(options: SquirrelOptions, directory: string, updateFile: string, outFile: string, version: string, packager: WinPackager) {\n  // SW now doesn't support 0-level nupkg compressed files. It means that we are forced to use level 1 if store level requested.\n  const archive = archiver(\"zip\", {zlib: {level: Math.max(1, (options.packageCompressionLevel == null ? 9 : options.packageCompressionLevel))}})\n  const archiveOut = createWriteStream(outFile)\n  const archivePromise = new Promise((resolve, reject) => {\n    archive.on(\"error\", reject)\n    archiveOut.on(\"error\", reject)\n    archiveOut.on(\"close\", resolve)\n  })\n  archive.pipe(archiveOut)\n\n  const author = options.authors\n  const copyright = options.copyright || `Copyright © ${new Date().getFullYear()} ${author}`\n  const nuspecContent = `<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n  <metadata>\n    <id>${options.appId}</id>\n    <version>${version}</version>\n    <title>${options.productName}</title>\n    <authors>${author}</authors>\n    <iconUrl>${options.iconUrl}</iconUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>${options.description}</description>\n    <copyright>${copyright}</copyright>${options.extraMetadataSpecs || \"\"}\n  </metadata>\n</package>`\n  debug(`Created NuSpec file:\\n${nuspecContent}`)\n  archive.append(nuspecContent.replace(/\\n/, \"\\r\\n\"), {name: `${options.name}.nuspec`})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  <Relationship Type=\"http://schemas.microsoft.com/packaging/2010/07/manifest\" Target=\"/${options.name}.nuspec\" Id=\"Re0\" />\n  <Relationship Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"/package/services/metadata/core-properties/1.psmdcp\" Id=\"Re1\" />\n</Relationships>`.replace(/\\n/, \"\\r\\n\"), {name: \".rels\", prefix: \"_rels\"})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\n  <Default Extension=\"nuspec\" ContentType=\"application/octet\" />\n  <Default Extension=\"pak\" ContentType=\"application/octet\" />\n  <Default Extension=\"asar\" ContentType=\"application/octet\" />\n  <Default Extension=\"bin\" ContentType=\"application/octet\" />\n  <Default Extension=\"dll\" ContentType=\"application/octet\" />\n  <Default Extension=\"exe\" ContentType=\"application/octet\" />\n  <Default Extension=\"dat\" ContentType=\"application/octet\" />\n  <Default Extension=\"psmdcp\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />\n  <Default Extension=\"diff\" ContentType=\"application/octet\" />\n  <Default Extension=\"bsdiff\" ContentType=\"application/octet\" />\n  <Default Extension=\"shasum\" ContentType=\"text/plain\" />\n  <Default Extension=\"mp3\" ContentType=\"audio/mpeg\" />\n  <Default Extension=\"node\" ContentType=\"application/octet\" />\n</Types>`.replace(/\\n/, \"\\r\\n\"), {name: \"[Content_Types].xml\"})\n\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">\n  <dc:creator>${author}</dc:creator>\n  <dc:description>${options.description}</dc:description>\n  <dc:identifier>${options.appId}</dc:identifier>\n  <version>${version}</version>\n  <keywords/>\n  <dc:title>${options.productName}</dc:title>\n  <lastModifiedBy>NuGet, Version=2.8.50926.602, Culture=neutral, PublicKeyToken=null;Microsoft Windows NT 6.2.9200.0;.NET Framework 4</lastModifiedBy>\n</coreProperties>`.replace(/\\n/, \"\\r\\n\"), {name: \"1.psmdcp\", prefix: \"package/services/metadata/core-properties\"})\n\n  archive.file(updateFile, {name: \"Update.exe\", prefix: \"lib/net45\"})\n  await encodedZip(archive, directory, \"lib/net45\", options.vendorPath, packager)\n  await archivePromise\n}\n\nasync function msi(options: SquirrelOptions, nupkgPath: string, setupPath: string, outputDirectory: string, outFile: string) {\n  const args = [\n    \"--createMsi\", nupkgPath,\n    \"--bootstrapperExe\", setupPath\n  ]\n  await exec(process.platform === \"win32\" ? path.join(options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(options.vendorPath, \"Update-Mono.exe\")))\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"candle.exe\"), [\"-nologo\", \"-ext\", \"WixNetFxExtension\", \"-out\", \"Setup.wixobj\", \"Setup.wxs\"], {\n    cwd: outputDirectory,\n  })\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"light.exe\"), [\"-ext\", \"WixNetFxExtension\", \"-sval\", \"-out\", outFile, \"Setup.wixobj\"], {\n    cwd: outputDirectory,\n  })\n\n  //noinspection SpellCheckingInspection\n  await Promise.all([\n    unlink(path.join(outputDirectory, \"Setup.wxs\")),\n    unlink(path.join(outputDirectory, \"Setup.wixobj\")),\n    unlink(path.join(outputDirectory, outFile.replace(\".msi\", \".wixpdb\"))).catch(e => debug(e.toString())),\n  ])\n}\n\nasync function encodedZip(archive: any, dir: string, prefix: string, vendorPath: string, packager: WinPackager) {\n  await walk(dir, null, {\n    isIncludeDir: true,\n    consume: async (file, stats) => {\n      if (stats.isDirectory()) {\n        return\n      }\n\n      const relativeSafeFilePath = file.substring(dir.length + 1).replace(/\\\\/g, \"/\")\n      archive._append(file, {\n        name: relativeSafeFilePath,\n        prefix,\n        stats,\n      })\n\n      // createExecutableStubForExe\n      // https://github.com/Squirrel/Squirrel.Windows/pull/1051 Only generate execution stubs for the top-level executables\n      if (file.endsWith(\".exe\") && !file.includes(\"squirrel.exe\") && !relativeSafeFilePath.includes(\"/\")) {\n        const tempFile = await packager.getTempFile(\"stub.exe\")\n        await copyFile(path.join(vendorPath, \"StubExecutable.exe\"), tempFile)\n        await execWine(path.join(vendorPath, \"WriteZipToSetup.exe\"), [\"--copy-stub-resources\", file, tempFile])\n        await packager.sign(tempFile)\n\n        archive._append(tempFile, {\n          name: relativeSafeFilePath.substring(0, relativeSafeFilePath.length - 4) + \"_ExecutionStub.exe\",\n          prefix,\n          stats: await stat(tempFile),\n        })\n      }\n    }\n  })\n  archive.finalize()\n}"],"sourceRoot":""}
