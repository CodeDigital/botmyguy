{"version":3,"sources":["../src/SquirrelWindowsTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvalidConfigurationError, log } from \"builder-util\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { Arch, getArchSuffix, SquirrelWindowsOptions, Target } from \"electron-builder-lib\"\nimport { WinPackager } from \"electron-builder-lib/out/winPackager\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { convertVersion, SquirrelBuilder, SquirrelOptions } from \"./squirrelPack\"\n\nexport default class SquirrelWindowsTarget extends Target {\n  //tslint:disable-next-line:no-object-literal-type-assertion\n  readonly options: SquirrelWindowsOptions = {...this.packager.platformSpecificBuildOptions, ...this.packager.config.squirrelWindows} as SquirrelWindowsOptions\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"squirrel\")\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    const packager = this.packager\n    const version = packager.appInfo.version\n    const sanitizedName = sanitizeFileName(this.appName)\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    const setupFile = packager.expandArtifactNamePattern(this.options, \"exe\", arch, \"${productName} Setup ${version}.${ext}\")\n    const packageFile = `${sanitizedName}-${convertVersion(version)}-full.nupkg`\n\n    const installerOutDir = path.join(this.outDir, `squirrel-windows${getArchSuffix(arch)}`)\n\n    const artifactPath = path.join(installerOutDir, setupFile)\n\n    this.logBuilding(\"Squirrel.Windows\", artifactPath, arch)\n    if (arch === Arch.ia32) {\n      log.warn(\"For windows consider only distributing 64-bit or use nsis target, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const distOptions = await this.computeEffectiveDistOptions()\n    const squirrelBuilder = new SquirrelBuilder(distOptions as SquirrelOptions, installerOutDir, packager)\n    await squirrelBuilder.buildInstaller({setupFile, packageFile}, appOutDir, this.outDir, arch)\n\n    packager.dispatchArtifactCreated(artifactPath, this, arch, `${sanitizedName}-Setup-${version}${getArchSuffix(arch)}.exe`)\n\n    const packagePrefix = `${this.appName}-${convertVersion(version)}-`\n    packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`), this, arch)\n    if (distOptions.remoteReleases != null) {\n      packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`), this, arch)\n    }\n\n    packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"), this, arch)\n  }\n\n  private get appName() {\n    return this.options.name || this.packager.appInfo.name\n  }\n\n  async computeEffectiveDistOptions(): Promise<SquirrelOptions> {\n    const packager = this.packager\n    let iconUrl = this.options.iconUrl\n    if (iconUrl == null) {\n      const info = await packager.info.repositoryInfo\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.info.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new InvalidConfigurationError(\"iconUrl is not specified, please see https://electron.build/configuration/configuration#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.options)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const appName = this.appName\n    const options: SquirrelOptions = {\n      name: appName,\n      productName: this.options.name || appInfo.productName,\n      appId: this.options.useAppIdAsId ? appInfo.id : appName,\n      version: appInfo.version,\n      description: appInfo.description,\n      // better to explicitly set to empty string, to avoid any nugget errors\n      authors: appInfo.companyName || \"\",\n      iconUrl,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: parseInt((process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || packager.compression === \"store\" ? 0 : 9) as any, 10),\n      vendorPath: await getBinFromGithub(\"Squirrel.Windows\", \"1.7.8\", \"p4Z7//ol4qih1xIl2l9lOeFf1RmX4y1eAJkol+3q7iZ0iEMotBhs3HXFLxU435xLRhKghYOjSYu7WiUktsP5Bg==\"),\n      ...this.options as any,\n    }\n\n    if (options.remoteToken == null) {\n      options.remoteToken = process.env.GH_TOKEN || process.env.GITHUB_TOKEN\n    }\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    if (this.options.remoteReleases === true) {\n      const info = await packager.info.repositoryInfo\n      if (info == null) {\n        log.warn(\"remoteReleases set to true, but cannot get repository info\")\n      }\n      else {\n        options.remoteReleases = `https://github.com/${info.user}/${info.project}`\n        log.info({remoteReleases: options.remoteReleases}, `remoteReleases is set`)\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (const name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new InvalidConfigurationError(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    log.warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new InvalidConfigurationError(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}\n"],"sourceRoot":""}
