{"version":3,"sources":["../src/macosVersion.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;4CAgBA,WAA+C,KAA/C,EAA4D;AAC1D,WAAO,SAAO,GAAP,EAAW,MAAM,aAAa,KAA9B,GAAqC,MAAM,KAAN,CAArC,CAAP;AACD,G;;kBAFI,+B;;;;;;;AAdL,MAAM,eAAe,KAAI,eAAJ,gCAAiB,aAAW;AAC/C,QAAM,OAAO,MAAM,0BAAS,kDAAT,EAA6D,MAA7D,CAAnB;AACA,QAAM,UAAU,8DAA8D,IAA9D,CAAmE,IAAnE,CAAhB;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,cAAI,KAAJ,CAAU;AAAC,aAAS,QAAQ,CAAR;AAAV,GAAV,EAAiC,eAAjC;;AACA,SAAO,MAAM,QAAQ,CAAR,CAAN,CAAP;AACD,CARoB,EAArB;;AAUA,SAAA,KAAA,CAAe,OAAf,EAA8B;AAC5B,SAAO,QAAQ,KAAR,CAAc,GAAd,EAAmB,MAAnB,KAA8B,CAA9B,GAAkC,GAAG,OAAO,IAA5C,GAAmD,OAA1D;AACD;;AAMK,SAAA,eAAA,GAAA;AACJ,SAAO,aAAa,KAApB;AACD;;;4CAEM,aAAK;AACV,WAAO,QAAQ,QAAR,KAAqB,QAArB,KAAiC,MAAM,gCAAgC,SAAhC,CAAvC,CAAP;AACD,G;;kBAFW,a;;;;;;;;4CAIL,aAAK;AACV,WAAO,QAAQ,QAAR,KAAqB,QAArB,KAAiC,MAAM,gCAAgC,SAAhC,CAAvC,CAAP;AACD,G;;kBAFW,iB;;;;;;;;4CAIL,aAAK;AACV,WAAO,QAAQ,QAAR,KAAqB,QAArB,KAAiC,MAAM,gCAAgC,SAAhC,CAAvC,CAAP;AACD,G;;kBAFW,Y","sourcesContent":["import { readFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as semver from \"semver\"\nimport { log } from \"./util\"\n\nconst macOsVersion = new Lazy<string>(async () => {\n  const file = await readFile(\"/System/Library/CoreServices/SystemVersion.plist\", \"utf8\")\n  const matches = /<key>ProductVersion<\\/key>[\\s\\S]*<string>([\\d.]+)<\\/string>/.exec(file)\n  if (!matches) {\n    throw new Error(\"Couldn't find the macOS version\")\n  }\n  log.debug({version: matches[1]}, \"macOS version\")\n  return clean(matches[1])\n})\n\nfunction clean(version: string) {\n  return version.split(\".\").length === 2 ? `${version}.0` : version\n}\n\nasync function isOsVersionGreaterThanOrEqualTo(input: string) {\n  return semver.gte(await macOsVersion.value, clean(input))\n}\n\nexport function getMacOsVersion() {\n  return macOsVersion.value\n}\n\nexport async function isMacOsSierra() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.12.0\")\n}\n\nexport async function isMacOsHighSierra() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.13.0\")\n}\n\nexport async function isCanSignDmg() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.11.5\")\n}\n"],"sourceRoot":""}
