{"version":3,"sources":["../src/license.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEM,SAAA,gBAAA,CAA2B,SAA3B,EAAqD,QAArD,EAA6E;AACjF,SAAO,UAAU,IAAV,CAAe,CAAC,CAAD,EAAI,CAAJ,KAAS;AAC7B,UAAM,KAAK,EAAE,QAAF,CAAW,KAAX,IAAoB,CAApB,GAAwB,GAAnC;AACA,UAAM,KAAK,EAAE,QAAF,CAAW,KAAX,IAAoB,CAApB,GAAwB,GAAnC;AACA,WAAO,OAAO,EAAP,GAAY,EAAE,aAAF,CAAgB,CAAhB,CAAZ,GAAiC,KAAK,EAA7C;AACD,GAJM,EAKJ,GALI,CAKA,QAAO;AACV,QAAI,OAAO,KAAK,KAAL,CAAW,YAAX,EAA0B,CAA1B,CAAX;AACA,QAAI,cAAJ;;AACA,QAAI,KAAK,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtB,uBAAiB,IAAjB;AACA,aAAO,eAAe,SAAf,CAAyB,CAAzB,EAA4B,KAAK,OAAL,CAAa,GAAb,CAA5B,CAAP;AACD,KAHD,MAIK;AACH,aAAO,KAAK,WAAL,EAAP;AACA,uBAAiB,+BAAiB,IAAjB,CAAjB;AACD;;AACD,WAAO;AAAC,YAAM,KAAK,IAAL,CAAU,SAAS,iBAAnB,EAAsC,IAAtC,CAAP;AAAoD,UAApD;AAA0D,oBAA1D;AAA0E,gBAAW,sBAAqB,IAArB;AAArF,KAAP;AACD,GAjBI,CAAP;AAkBD;;;2CAEM,WAA2C,MAA3C,EAA8E,QAA9E,EAAsG;AAC3G,UAAM,gBAA+B,EAArC;;AACA,SAAK,MAAM,IAAX,IAAmB,CAAC,SAAD,EAAY,MAAZ,CAAnB,EAAwC;AACtC,WAAK,MAAM,GAAX,IAAkB,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAAlB,EAA0C;AACxC,sBAAc,IAAd,CAAmB,GAAG,IAAI,IAAI,GAAG,EAAjC;AACA,sBAAc,IAAd,CAAmB,GAAG,KAAK,WAAL,EAAkB,IAAI,GAAG,EAA/C;AACA,sBAAc,IAAd,CAAmB,GAAG,IAAI,IAAI,IAAI,WAAJ,EAAiB,EAA/C;AACA,sBAAc,IAAd,CAAmB,GAAG,KAAK,WAAL,EAAkB,IAAI,IAAI,WAAJ,EAAiB,EAA7D;AACD;AACF;;AAED,WAAO,MAAM,SAAS,WAAT,CAAqB,MAArB,EAA6B,GAAG,aAAhC,CAAb;AACD,G;;kBAZW,2B;;;;;;;;4CAcL,WAA+B,QAA/B,EAAuD;AAC5D,WAAO,iBAAiB,CAAC,MAAM,SAAS,YAAhB,EACrB,MADqB,CACd,MAAK;AACX,YAAM,OAAO,GAAG,WAAH,EAAb;AACA,aAAO,CAAC,KAAK,UAAL,CAAgB,UAAhB,KAA+B,KAAK,UAAL,CAAgB,OAAhB,CAAhC,MAA8D,KAAK,QAAL,CAAc,MAAd,KAAyB,KAAK,QAAL,CAAc,MAAd,CAAvF,CAAP;AACD,KAJqB,CAAjB,EAID,QAJC,CAAP;AAKD,G;;kBANW,e","sourcesContent":["import * as path from \"path\"\nimport { PackageBuilder } from \"./api\"\nimport { langIdToName, toLangWithRegion } from \"./langs\"\n\nexport function getLicenseAssets(fileNames: Array<string>, packager: PackageBuilder) {\n  return fileNames.sort((a, b) => {\n    const aW = a.includes(\"_en\") ? 0 : 100\n    const bW = b.includes(\"_en\") ? 0 : 100\n    return aW === bW ? a.localeCompare(b) : aW - bW\n  })\n    .map(file => {\n      let lang = file.match(/_([^.]+)\\./)![1]\n      let langWithRegion\n      if (lang.includes(\"_\")) {\n        langWithRegion = lang\n        lang = langWithRegion.substring(0, lang.indexOf(\"_\"))\n      }\n      else {\n        lang = lang.toLowerCase()\n        langWithRegion = toLangWithRegion(lang)\n      }\n      return {file: path.join(packager.buildResourcesDir, file), lang, langWithRegion, langName: (langIdToName as any)[lang]}\n    })\n}\n\nexport async function getNotLocalizedLicenseFiles(custom: string | null | undefined, packager: PackageBuilder): Promise<string | null> {\n  const possibleFiles: Array<string> = []\n  for (const name of [\"license\", \"eula\"]) {\n    for (const ext of [\"rtf\", \"txt\", \"html\"]) {\n      possibleFiles.push(`${name}.${ext}`)\n      possibleFiles.push(`${name.toUpperCase()}.${ext}`)\n      possibleFiles.push(`${name}.${ext.toUpperCase()}`)\n      possibleFiles.push(`${name.toUpperCase()}.${ext.toUpperCase()}`)\n    }\n  }\n\n  return await packager.getResource(custom, ...possibleFiles)\n}\n\nexport async function getLicenseFiles(packager: PackageBuilder): Promise<Array<LicenseFile>> {\n  return getLicenseAssets((await packager.resourceList)\n    .filter(it => {\n      const name = it.toLowerCase()\n      return (name.startsWith(\"license_\") || name.startsWith(\"eula_\")) && (name.endsWith(\".rtf\") || name.endsWith(\".txt\"))\n    }), packager)\n}\n\nexport interface LicenseFile {\n  file: string\n  lang: string\n  langWithRegion: string\n  langName: string\n}"],"sourceRoot":""}
