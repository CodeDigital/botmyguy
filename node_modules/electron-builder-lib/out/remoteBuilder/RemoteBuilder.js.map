{"version":3,"sources":["../../src/remoteBuilder/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, isEnvTrue, log } from \"builder-util\"\nimport { connect, constants } from \"http2\"\nimport * as path from \"path\"\nimport { promisify } from \"util\"\nimport { Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\nimport { ArtifactInfo, checkStatus, getConnectOptions, RemoteBuildManager } from \"./RemoteBuildManager\"\n\ninterface TargetInfo {\n  name: string\n  arch: string\n  unpackedDirectory: string\n  outDir: string\n}\n\nconst errorCodes = new Set([\"ECONNREFUSED\", \"ECONNRESET\"])\n\nexport class RemoteBuilder {\n  private readonly toBuild = new Map<Arch, Array<TargetInfo>>()\n  private buildStarted = false\n\n  constructor(readonly packager: PlatformPackager<any>) {\n  }\n\n  scheduleBuild(target: Target, arch: Arch, unpackedDirectory: string) {\n    if (!isEnvTrue(process.env._REMOTE_BUILD) && this.packager.config.remoteBuild === false) {\n      throw new Error(\"Target is not supported on your OS and using of Electron Build Service is disabled (\\\"remoteBuild\\\" option)\")\n    }\n\n    let list = this.toBuild.get(arch)\n    if (list == null) {\n      list = []\n      this.toBuild.set(arch, list)\n    }\n\n    list.push({\n      name: target.name,\n      arch: Arch[arch],\n      unpackedDirectory,\n      outDir: target.outDir,\n    })\n  }\n\n  build(): Promise<any> {\n    if (this.buildStarted) {\n      return Promise.resolve()\n    }\n\n    this.buildStarted = true\n\n    return BluebirdPromise.mapSeries(Array.from(this.toBuild.keys()), (arch: Arch) => {\n      return this._build(this.toBuild.get(arch)!!, this.packager)\n    })\n  }\n\n  // noinspection JSMethodCanBeStatic\n  private async _build(targets: Array<TargetInfo>, packager: PlatformPackager<any>): Promise<any> {\n    if (log.isDebugEnabled) {\n      log.debug({remoteTargets: JSON.stringify(targets, null, 2)}, \"remote building\")\n    }\n\n    const projectInfoManager = new ProjectInfoManager(packager.info)\n\n    let result: RemoteBuilderResponse | null = null\n    for (let attempt = 0; true; attempt++) {\n      const endpoint = await findBuildAgent()\n      // for now assume that all targets has the same outDir (correct for Linux)\n      const buildManager = new RemoteBuildManager(endpoint, projectInfoManager, targets[0].unpackedDirectory, targets[0].outDir, packager)\n      const setTimeoutPromise = promisify(setTimeout)\n      try {\n        result = await buildManager.build({\n          \"x-build-request\": JSON.stringify({\n            targets: targets.map(it => {\n              return {\n                name: it.name,\n                arch: it.arch,\n                unpackedDirName: path.basename(it.unpackedDirectory),\n              }\n            }),\n            platform: packager.platform.buildConfigurationKey,\n          })\n        })\n        break\n      }\n      catch (e) {\n        const errorCode: string = e.code\n        if (!errorCodes.has(errorCode) || attempt > 3) {\n          if (errorCode === \"ECONNREFUSED\") {\n            const error = new Error(`Cannot connect to electron build service ${endpoint}: ${e.message}`)\n            e.code = errorCode\n            throw error\n          }\n          else {\n            throw e\n          }\n        }\n\n        const waitTime = 4000 * (attempt + 1)\n        console.warn(`Attempt ${attempt + 1}: ${e.message}\\nWaiting ${waitTime / 1000}s...`)\n        await setTimeoutPromise(waitTime, \"wait\")\n      }\n    }\n\n    if (result != null && result.error != null) {\n      throw new Error(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`)\n    }\n  }\n}\n\nasync function findBuildAgent(): Promise<string> {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ENDPOINT\n  if (result != null) {\n    log.debug({endpoint: result}, `endpoint is set explicitly`)\n    return result.startsWith(\"http\") ? result : `https://${result}`\n  }\n\n  const rawUrl = process.env.ELECTRON_BUILD_SERVICE_ROUTER_HOST || \"service.electron.build\"\n  // add random query param to prevent caching\n  const routerUrl = rawUrl.startsWith(\"http\") ? rawUrl : `https://${rawUrl}`\n  log.debug({routerUrl}, \"\")\n  const client = connect(routerUrl, getConnectOptions())\n  return await new BluebirdPromise<string>((resolve, reject) => {\n    client.on(\"socketError\", reject)\n    client.on(\"error\", reject)\n    client.setTimeout(10 * 1000, () => {\n      reject(new Error(\"Timeout\"))\n    })\n\n    const stream = client.request({\n      [constants.HTTP2_HEADER_PATH]: `/find-build-agent?c=${Date.now().toString(32)}`,\n      [constants.HTTP2_HEADER_METHOD]: constants.HTTP2_METHOD_GET,\n    })\n    stream.on(\"error\", reject)\n\n    stream.on(\"response\", headers => {\n      if (!checkStatus(headers[constants.HTTP2_HEADER_STATUS] as any, reject)) {\n        return\n      }\n\n      stream.setEncoding(\"utf8\")\n      let data = \"\"\n      stream.on(\"end\", () => {\n        try {\n          if (log.isDebugEnabled) {\n            log.debug({data}, \"remote build response\")\n          }\n          resolve(JSON.parse(data).endpoint)\n        }\n        catch (e) {\n          throw new Error(`Cannot parse response: ${data}`)\n        }\n      })\n      stream.on(\"data\", (chunk: string) => {\n        data += chunk\n      })\n    })\n  })\n    .finally(() => {\n      client.destroy()\n    })\n}\n\nexport interface RemoteBuilderResponse {\n  files: Array<ArtifactInfo> | null\n  error: string | null\n}"],"sourceRoot":""}
