{"version":3,"sources":["../../src/remoteBuilder/RemoteBuildManager.ts"],"names":[],"mappings":";;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AADA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAGA,MAAM;AACJ,mBADI;AAEJ,mBAFI;AAGJ,qBAHI;AAIJ,2BAJI;AAKJ,qBALI;AAMJ;AANI,IAOF,iBAPJ;;AASA,MAAM,iBAAiB,8BAAU,QAAQ,GAAR,CAAY,mCAAtB,CAAvB;;AAEM,SAAA,iBAAA,GAAA;AACJ,QAAM,UAAsC,EAA5C;AACA,QAAM,SAAS,QAAQ,GAAR,CAAY,8BAA3B;;AACA,MAAI,WAAW,OAAf,EAAwB;AACtB,QAAI,cAAJ,EAAoB;AAClB,yBAAI,KAAJ,CAAU,IAAV,EAAgB,qCAAhB;AACD;;AACD,YAAQ,EAAR,GAAa,WAAW,iBAAiB,0DAAjB,GAAwD,oDAAnE,CAAb,CAJsB,CAKtB;AACA;;AACA,YAAQ,mBAAR,GAA8B,MAAM,SAApC;AACD;;AACD,SAAO,OAAP;AACD;;AAEK,MAAA,kBAAA,CAAA;AAGJ,cAA6B,oBAA7B,EAC6B,kBAD7B,EAE6B,iBAF7B,EAG6B,MAH7B,EAI6B,QAJ7B,EAI4D;AAJ/B,SAAA,oBAAA,GAAA,oBAAA;AACA,SAAA,kBAAA,GAAA,kBAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,QAAA,GAAA,QAAA;;AAC3B,uBAAI,KAAJ,CAAU;AAAC,gBAAU;AAAX,KAAV,EAA4C,iCAA5C;;AACA,SAAK,MAAL,GAAc,qBAAQ,oBAAR,EAA8B,mBAA9B,CAAd;AACD;;AAED,QAAM,aAAN,EAAwC;AACtC,WAAO,KAAI,sBAAJ,EAAkD,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC3E,YAAM,SAAS,KAAK,MAApB;AACA,aAAO,EAAP,CAAU,aAAV,EAAyB,MAAzB;AACA,aAAO,EAAP,CAAU,OAAV,EAAmB,MAAnB;AAEA,UAAI,UAAU,KAAd;AACA,aAAO,IAAP,CAAY,OAAZ,EAAqB,MAAK;AACxB,YAAI,CAAC,OAAL,EAAc;AACZ,iBAAO,IAAI,KAAJ,CAAU,qBAAV,CAAP;AACD;AACF,OAJD;AAKA,aAAO,IAAP,CAAY,SAAZ,EAAuB,MAAK;AAC1B,eAAO,IAAI,KAAJ,CAAU,SAAV,CAAP;AACD,OAFD;AAIA,WAAK,OAAL,CAAa,aAAb,EACG,IADH,CACQ,UAAS;AACb,kBAAU,IAAV;;AAEA,YAAI,OAAO,KAAP,IAAgB,IAApB,EAA0B;AACxB,eAAK,MAAM,QAAX,IAAuB,OAAO,KAA9B,EAAqC;AACnC,kBAAM,YAAY,KAAK,IAAL,CAAU,KAAK,MAAf,EAAuB,SAAS,IAAhC,CAAlB;AACA,kBAAM,uBAAuB,KAAK,kCAAL,CAAwC,QAAxC,EAAkD,SAAlD,CAA7B,CAFmC,CAGnC;;AACA,iBAAK,kBAAL,CAAwB,QAAxB,CAAiC,uBAAjC,CAAyD,oBAAzD;AACD;AACF;;AAED,gBAAQ,MAAR;AACD,OAdH,EAeG,KAfH,CAeS,MAfT;AAgBD,KA/BM,EAgCJ,OAhCI,CAgCI,MAAK;AACZ,WAAK,MAAL,CAAY,OAAZ;AACD,KAlCI,CAAP;AAmCD;;AAEO,UAAQ,aAAR,EAA0C;AAChD,UAAM,eAAe,QAAQ,oCAAR,CAArB;;AACA,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,YAAM,uBAAuB,wBAAwB,KAAK,oBAA7B,CAA7B;AACA,YAAM,SAAS,KAAK,MAAL,CAAY,OAAZ,CAAmB,OAAA,MAAA,CAAA;AAChC,SAAC,iBAAD,GAAqB,WADW;AAEhC,SAAC,mBAAD,GAAuB,iBAFS;AAGhC,SAAC,yBAAD,GAA6B;AAHG,OAAA,EAI7B,aAJ6B,EAIhB;AAChB;AACA,oCAA4B;AAFZ,OAJgB,CAAnB,CAAf;AAQA,aAAO,EAAP,CAAU,OAAV,EAAmB,MAAnB,EAVqC,CAWrC;;AACA,WAAK,wBAAL,CAA8B,MAA9B,EAAsC,oBAAtC,EAA4D,MAA5D;AAEA,aAAO,EAAP,CAAU,UAAV,EAAsB,WAAU;AAC9B,cAAM,SAAiB,QAAQ,mBAAR,CAAvB;;AACA,YAAI,WAAW,cAAf,EAA+B;AAC7B,iBAAO,KAAI,+BAAJ,EAAc,MAAd,CAAP;AACA;AACD;;AAED,eAAO,IAAP,CAAY,aAAa,UAAb,EAAZ,EACG,EADH,CACM,MADN,EACe,MAAD,IAAgB;AAC1B,gBAAM,OAAO,OAAO,KAApB;;AACA,cAAI,mBAAI,cAAR,EAAwB;AACtB,+BAAI,KAAJ,CAAU;AAAC,qBAAO,KAAK,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B;AAAR,aAAV,EAAkD,sBAAlD;AACD;;AAED,cAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;AACvB,+BAAI,IAAJ,CAAS;AAAC,sBAAQ,KAAK;AAAd,aAAT,EAAgC,iBAAhC;AACD,WAFD,MAGK,IAAI,WAAW,IAAf,EAAqB;AACxB,oBAAQ;AAAC,qBAAO,IAAR;AAAc,qBAAO,KAAK;AAA1B,aAAR;AACD,WAFI,MAGA,IAAI,WAAW,IAAf,EAAqB;AACxB,iBAAK,iBAAL,CAAuB,KAAK,KAA5B,EAAmC,KAAK,SAAxC,EAAmD,KAAK,OAAxD,EACG,IADH,CACQ,MAAK;AACT,qBAAO,OAAP;AACA,sBAAQ;AAAC,uBAAO,KAAK,KAAb;AAAoB,uBAAO;AAA3B,eAAR;AACD,aAJH,EAKG,KALH,CAKS,MALT;AAMD,WAPI,MAQA;AACH,+BAAI,IAAJ,CAAS,0BAA0B,KAAK,SAAL,CAAe,IAAf,CAAoB,EAAvD;AACD;AACF,SAxBH;AAyBD,OAhCD;AAiCD,KA/CM,CAAP;AAgDD;;AAEO,oBAAkB,KAAlB,EAA8C,SAA9C,EAAwE,OAAxE,EAAuF;AAC7F,UAAM,OAAO,CAAC,yBAAD,EAA4B,OAA5B,EAAqC,KAAK,MAA1C,EAAkD,YAAlD,EAAgE,KAAK,oBAAL,GAA4B,OAA5F,CAAb;;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,YAAM,WAAW,MAAM,CAAN,CAAjB;AACA,WAAK,IAAL,CAAU,IAAV,EAAgB,SAAS,IAAzB;AACA,WAAK,IAAL,CAAU,IAAV,EAAgB,UAAU,CAAV,EAAa,QAAb,EAAhB;AACD;;AACD,WAAO,sCAAkB,IAAlB,CAAP;AACD;;AAEO,qCAAmC,QAAnC,EAA2D,SAA3D,EAA4E;AAClF,UAAM,SAAS,SAAS,MAAxB,CADkF,CAElF;;AACA,WAAA,OAAA,MAAA,CAAA,EAAA,EACK,QADL,EACa;AACX,YAAM,SADK;AAEX,cAAQ,UAAU,IAAV,GAAiB,IAAjB,GAAwB,IAAI,UAAJ,CAAe,MAAf,EAAuB,KAAK,MAA5B,EAAqC,KAAK,QAAL,CAAc,MAAd,CAA6B,MAA7B,CAArC,CAFrB;AAGX,gBAAU,KAAK;AAHJ,KADb,CAAA;AAMD,GAzHG,CA2HJ;;;AACQ,2BAAyB,MAAzB,EAAoD,oBAApD,EAAkF,MAAlF,EAAgH;AACtH,UAAM,WAAW,KAAK,kBAAL,CAAwB,QAAzC;AACA,UAAM,oBAAoB,SAAS,iBAAnC;;AACA,QAAI,sBAAsB,SAAS,UAAnC,EAA+C;AAC7C,aAAO,IAAI,KAAJ,CAAU,wOAAV,CAAP;AACA;AACD;;AAED,YAAQ,GAAR,CAAY,CAAC,KAAK,kBAAL,CAAwB,QAAxB,CAAiC,KAAlC,EAAyC,uBAAzC,CAAZ,EACG,IADH,CACQ,WAAU;AACd,YAAM,WAAW,QAAQ,CAAR,CAAjB;;AACA,yBAAI,IAAJ,CAAS,6CAAT;;AACA,YAAM,yBAAyB,KAAI,iBAAJ,EAAa,qBAAb,CAA/B,CAHc,CAId;;AACA,YAAM,aAAa,4BAAM,iBAAN,EAAe,CAChC,GADgC,EAC3B,OAD2B,EAClB,OADkB,EACT,KADS,EAEhC,KAAK,iBAF2B,EAGhC,QAHgC,EAIhC,iBAJgC,CAAf,EAKhB;AACD,eAAO,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAQ,MAAzB;AADN,OALgB,CAAnB;AAQA,iBAAW,MAAX,CAAkB,EAAlB,CAAqB,OAArB,EAA8B,MAA9B;AAEA,YAAM,cAAc,4BAAM,QAAQ,CAAR,CAAN,EAAkB,CAAC,IAAI,oBAAoB,EAAzB,EAA6B,QAA7B,CAAlB,EAA0D;AAC5E,eAAO,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAQ,MAAzB;AADqE,OAA1D,CAApB;AAGA,kBAAY,EAAZ,CAAe,OAAf,EAAwB,MAAxB;AACA,iBAAW,MAAX,CAAkB,IAAlB,CAAuB,YAAY,KAAnC;AACA,kBAAY,MAAZ,CAAmB,IAAnB,CAAwB,MAAxB;AAEA,kBAAY,MAAZ,CAAmB,EAAnB,CAAsB,KAAtB,EAA6B,MAAK;AAChC,2BAAI,IAAJ,CAAS;AAAC,gBAAM,uBAAuB,SAAvB;AAAP,SAAT,EAAqD,4BAArD;AACD,OAFD;AAGD,KA1BH,EA2BG,KA3BH,CA2BS,MA3BT;AA4BD;;AAhKG;;;;AAmKN,SAAA,uBAAA,CAAiC,QAAjC,EAAiD;AAC/C,QAAM,SAAS,QAAQ,GAAR,CAAY,uCAA3B;;AACA,MAAI,UAAU,IAAd,EAAoB;AAClB,WAAO,MAAP;AACD,GAJ8C,CAK/C;AACA;AACA;;;AACA,SAAO,SAAS,UAAT,CAAoB,oBAApB,KAA6C,SAAS,UAAT,CAAoB,oBAApB,CAA7C,IAA0F,SAAS,UAAT,CAAoB,QAApB,CAA1F,GAA0H,GAA1H,GAAgI,IAAvI;AACD;;AAEK,SAAA,WAAA,CAAsB,MAAtB,EAAsC,MAAtC,EAAoE;AACxE,MAAI,WAAW,cAAf,EAA+B;AAC7B,WAAO,IAAP;AACD,GAFD,MAGK;AACH,WAAO,KAAI,+BAAJ,EAAc,MAAd,CAAP;AACA,WAAO,KAAP;AACD;AACF;;AAED,MAAA,UAAA,SAAyB,cAAzB,CAA+B;AAC7B,cAAY,IAAZ,EAAmC,MAAnC,EAA4D,OAA5D,EAA6G;AAC3G,UAAM,IAAN;AADiC,SAAA,MAAA,GAAA,MAAA;AAAyB,SAAA,OAAA,GAAA,OAAA;AAE3D;;AAEK,OAAN,CAAY,SAAZ,EAA+B,IAA/B,EAAyC,CACvC;;AADuC;AAExC;;AAP4B","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { Arch, isEnvTrue, log, executeAppBuilder } from \"builder-util\"\nimport { HttpError } from \"builder-util-runtime\"\nimport { spawn } from \"child_process\"\nimport { UploadTask } from \"electron-publish\"\nimport { ClientHttp2Session, ClientHttp2Stream, connect, constants, OutgoingHttpHeaders, SecureClientSessionOptions } from \"http2\"\nimport * as path from \"path\"\nimport { Target, TargetSpecificOptions } from \"../core\"\nimport { ArtifactCreated } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { getZstd } from \"../targets/tools\"\nimport { DevTimer } from \"../util/timer\"\nimport { ProjectInfoManager } from \"./ProjectInfoManager\"\nimport { ELECTRON_BUILD_SERVICE_CA_CERT, ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT } from \"./remote-builder-certs\"\nimport { RemoteBuilderResponse } from \"./RemoteBuilder\"\n\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_METHOD_POST,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_STATUS,\n  HTTP_STATUS_OK,\n} = constants\n\nconst isUseLocalCert = isEnvTrue(process.env.USE_ELECTRON_BUILD_SERVICE_LOCAL_CA)\n\nexport function getConnectOptions(): SecureClientSessionOptions {\n  const options: SecureClientSessionOptions = {}\n  const caCert = process.env.ELECTRON_BUILD_SERVICE_CA_CERT\n  if (caCert !== \"false\") {\n    if (isUseLocalCert) {\n      log.debug(null, \"local certificate authority is used\")\n    }\n    options.ca = caCert || (isUseLocalCert ? ELECTRON_BUILD_SERVICE_LOCAL_CA_CERT : ELECTRON_BUILD_SERVICE_CA_CERT)\n    // we cannot issue cert per IP because build agent can be started on demand (and for security reasons certificate authority is offline).\n    // Since own certificate authority is used, it is ok to skip server name verification.\n    options.checkServerIdentity = () => undefined\n  }\n  return options\n}\n\nexport class RemoteBuildManager {\n  private readonly client: ClientHttp2Session\n\n  constructor(private readonly buildServiceEndpoint: string,\n              private readonly projectInfoManager: ProjectInfoManager,\n              private readonly unpackedDirectory: string,\n              private readonly outDir: string,\n              private readonly packager: PlatformPackager<any>) {\n    log.debug({endpoint: buildServiceEndpoint}, \"connect to remote build service\")\n    this.client = connect(buildServiceEndpoint, getConnectOptions())\n  }\n\n  build(customHeaders: OutgoingHttpHeaders): Promise<RemoteBuilderResponse | null> {\n    return new BluebirdPromise<RemoteBuilderResponse | null>((resolve, reject) => {\n      const client = this.client\n      client.on(\"socketError\", reject)\n      client.on(\"error\", reject)\n\n      let handled = false\n      client.once(\"close\", () => {\n        if (!handled) {\n          reject(new Error(\"Closed unexpectedly\"))\n        }\n      })\n      client.once(\"timeout\", () => {\n        reject(new Error(\"Timeout\"))\n      })\n\n      this.doBuild(customHeaders)\n        .then(result => {\n          handled = true\n\n          if (result.files != null) {\n            for (const artifact of result.files) {\n              const localFile = path.join(this.outDir, artifact.file)\n              const artifactCreatedEvent = this.artifactInfoToArtifactCreatedEvent(artifact, localFile)\n              // PublishManager uses outDir and options, real (the same as for local build) values must be used\n              this.projectInfoManager.packager.dispatchArtifactCreated(artifactCreatedEvent)\n            }\n          }\n\n          resolve(result)\n        })\n        .catch(reject)\n    })\n      .finally(() => {\n        this.client.destroy()\n      })\n  }\n\n  private doBuild(customHeaders: OutgoingHttpHeaders): Promise<RemoteBuilderResponse> {\n    const StreamValues = require(\"stream-json/streamers/StreamValues\")\n    return new Promise((resolve, reject) => {\n      const zstdCompressionLevel = getZstdCompressionLevel(this.buildServiceEndpoint)\n      const stream = this.client.request({\n        [HTTP2_HEADER_PATH]: \"/v2/build\",\n        [HTTP2_HEADER_METHOD]: HTTP2_METHOD_POST,\n        [HTTP2_HEADER_CONTENT_TYPE]: \"application/octet-stream\",\n        ...customHeaders,\n        // only for stats purpose, not required for build\n        \"x-zstd-compression-level\": zstdCompressionLevel,\n      })\n      stream.on(\"error\", reject)\n      // this.handleStreamEvent(resolve, reject)\n      this.uploadUnpackedAppArchive(stream, zstdCompressionLevel, reject)\n\n      stream.on(\"response\", headers => {\n        const status: number = headers[HTTP2_HEADER_STATUS] as any\n        if (status !== HTTP_STATUS_OK) {\n          reject(new HttpError(status))\n          return\n        }\n\n        stream.pipe(StreamValues.withParser())\n          .on(\"data\", (object: any) => {\n            const data = object.value\n            if (log.isDebugEnabled) {\n              log.debug({event: JSON.stringify(data, null, 2)}, \"remote builder event\")\n            }\n\n            if (data.status != null) {\n              log.info({status: data.status}, \"remote building\")\n            }\n            else if (\"error\" in data) {\n              resolve({files: null, error: data.error})\n            }\n            else if (\"files\" in data) {\n              this.downloadArtifacts(data.files, data.fileSizes, data.baseUrl)\n                .then(() => {\n                  stream.destroy()\n                  resolve({files: data.files, error: null})\n                })\n                .catch(reject)\n            }\n            else {\n              log.warn(`Unknown builder event: ${JSON.stringify(data)}`)\n            }\n          })\n      })\n    })\n  }\n\n  private downloadArtifacts(files: Array<ArtifactInfo>, fileSizes: Array<number>, baseUrl: string) {\n    const args = [\"download-resolved-files\", \"--out\", this.outDir, \"--base-url\", this.buildServiceEndpoint + baseUrl]\n    for (let i = 0; i < files.length; i++) {\n      const artifact = files[i]\n      args.push(\"-f\", artifact.file)\n      args.push(\"-s\", fileSizes[i].toString())\n    }\n    return executeAppBuilder(args)\n  }\n\n  private artifactInfoToArtifactCreatedEvent(artifact: ArtifactInfo, localFile: string): ArtifactCreated {\n    const target = artifact.target\n    // noinspection SpellCheckingInspection\n    return {\n      ...artifact,\n      file: localFile,\n      target: target == null ? null : new FakeTarget(target, this.outDir, (this.packager.config as any)[target]),\n      packager: this.packager,\n    }\n  }\n\n  // compress and upload in the same time, directly to remote without intermediate local file\n  private uploadUnpackedAppArchive(stream: ClientHttp2Stream, zstdCompressionLevel: string, reject: (error: Error) => void) {\n    const packager = this.projectInfoManager.packager\n    const buildResourcesDir = packager.buildResourcesDir\n    if (buildResourcesDir === packager.projectDir) {\n      reject(new Error(`Build resources dir equals to project dir and so, not sent to remote build agent. It will lead to incorrect results.\\nPlease set \"directories.buildResources\" to separate dir or leave default (\"build\" directory in the project root)`))\n      return\n    }\n\n    Promise.all([this.projectInfoManager.infoFile.value, getZstd()])\n      .then(results => {\n        const infoFile = results[0]\n        log.info(\"compressing and uploading to remote builder\")\n        const compressAndUploadTimer = new DevTimer(\"compress and upload\")\n        // noinspection SpellCheckingInspection\n        const tarProcess = spawn(path7za, [\n          \"a\", \"dummy\", \"-ttar\", \"-so\",\n          this.unpackedDirectory,\n          infoFile,\n          buildResourcesDir,\n        ], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        tarProcess.stdout.on(\"error\", reject)\n\n        const zstdProcess = spawn(results[1], [`-${zstdCompressionLevel}`, \"--long\"], {\n          stdio: [\"pipe\", \"pipe\", process.stderr],\n        })\n        zstdProcess.on(\"error\", reject)\n        tarProcess.stdout.pipe(zstdProcess.stdin)\n        zstdProcess.stdout.pipe(stream)\n\n        zstdProcess.stdout.on(\"end\", () => {\n          log.info({time: compressAndUploadTimer.endAndGet()}, \"uploaded to remote builder\")\n        })\n      })\n      .catch(reject)\n  }\n}\n\nfunction getZstdCompressionLevel(endpoint: string): string {\n  const result = process.env.ELECTRON_BUILD_SERVICE_ZSTD_COMPRESSION\n  if (result != null) {\n    return result\n  }\n  // 18 - 40s\n  // 17 - 30s\n  // 16 - 20s\n  return endpoint.startsWith(\"https://127.0.0.1:\") || endpoint.startsWith(\"https://localhost:\") || endpoint.startsWith(\"[::1]:\") ? \"3\" : \"16\"\n}\n\nexport function checkStatus(status: number, reject: (error: Error) => void) {\n  if (status === HTTP_STATUS_OK) {\n    return true\n  }\n  else {\n    reject(new HttpError(status))\n    return false\n  }\n}\n\nclass FakeTarget extends Target {\n  constructor(name: string, readonly outDir: string, readonly options: TargetSpecificOptions | null | undefined) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    // no build\n  }\n}\n\nexport interface ArtifactInfo extends UploadTask {\n  target: string | null\n\n  readonly isWriteUpdateInfo?: boolean\n  readonly updateInfo?: any\n}"],"sourceRoot":""}
