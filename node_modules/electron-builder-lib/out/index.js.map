{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAeA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;2CAEO,WAAqB,OAArB,EAAgE,WAAqB,KAAI,oBAAJ,EAAa,OAAb,CAArF,EAA0G;AAC/G;AACA,UAAM,gBAAgB,IAAI,GAAJ,EAAtB;AACA,aAAS,eAAT,CAAyB,SAAQ;AAC/B,UAAI,MAAM,IAAN,IAAc,IAAlB,EAAwB;AACtB,sBAAc,GAAd,CAAkB,MAAM,IAAxB;AACD;AACF,KAJD;AAMA,UAAM,iBAAiB,KAAI,gCAAJ,EAAmB,QAAnB,EAA6B,OAA7B,CAAvB;;AACA,UAAM,gBAAgB,MAAK;AACzB,yBAAI,IAAJ,CAAS,qBAAT;;AACA,eAAS,iBAAT,CAA2B,MAA3B;AACA,qBAAe,WAAf;AACD,KAJD;;AAKA,YAAQ,IAAR,CAAa,QAAb,EAAuB,aAAvB;AAEA,WAAO,MAAM,+BAAe,SAAS,KAAT,GAAiB,IAAjB,CAAsB,MAAM,MAAM,IAAN,CAAW,aAAX,CAA5B,CAAf,EAAuE,iBAAgB;AAClG,UAAI,OAAJ;;AACA,UAAI,aAAJ,EAAmB;AACjB,uBAAe,WAAf;AACA,kBAAU,QAAQ,OAAR,CAAgB,IAAhB,CAAV;AACD,OAHD,MAIK;AACH,kBAAU,eAAe,UAAf,EAAV;AACD;;AAED,aAAO,QACJ,IADI,CACC,MAAM,QAAQ,cAAR,CAAuB,QAAvB,EAAiC,aAAjC,CADP,CAAP;AAED,KAZY,CAAb;AAaD,G;;kBA9BW,K","sourcesContent":["import { executeFinally } from \"builder-util/out/promise\"\nimport { PublishOptions } from \"electron-publish/out/publisher\"\nimport { log } from \"builder-util\"\nimport { Packager } from \"./packager\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { PublishManager } from \"./publish/PublishManager\"\n\nexport { Packager, BuildResult } from \"./packager\"\nexport { PackagerOptions, ArtifactCreated } from \"./packagerApi\"\nexport { TargetConfiguration, Platform, Target, DIR_TARGET, BeforeBuildContext, SourceRepositoryInfo, TargetSpecificOptions, TargetConfigType, DEFAULT_TARGET, CompressionLevel } from \"./core\"\nexport { getArchSuffix, Arch, archFromString } from \"builder-util\"\nexport { Configuration, AfterPackContext, MetadataDirectories } from \"./configuration\"\nexport { ElectronDownloadOptions, ElectronPlatformName } from \"./electron/electron-download\"\nexport { PlatformSpecificBuildOptions, AsarOptions, FileSet, Protocol, ReleaseInfo } from \"./options/PlatformSpecificBuildOptions\"\nexport { FileAssociation } from \"./options/FileAssociation\"\nexport { MacConfiguration, DmgOptions, MasConfiguration, MacOsTargetName, PkgOptions, DmgContent, DmgWindow } from \"./options/macOptions\"\nexport { WindowsConfiguration } from \"./options/winOptions\"\nexport { AppXOptions } from \"./options/AppXOptions\"\nexport { MsiOptions } from \"./options/MsiOptions\"\nexport { CommonWindowsInstallerConfiguration } from \"./options/CommonWindowsInstallerConfiguration\"\nexport { NsisOptions, NsisWebOptions, PortableOptions, CommonNsisOptions } from \"./targets/nsis/nsisOptions\"\nexport { LinuxConfiguration, DebOptions, CommonLinuxOptions, LinuxTargetSpecificOptions, AppImageOptions } from \"./options/linuxOptions\"\nexport { SnapOptions } from \"./options/SnapOptions\"\nexport { Metadata, AuthorMetadata, RepositoryInfo } from \"./options/metadata\"\nexport { AppInfo } from \"./appInfo\"\nexport { SquirrelWindowsOptions } from \"./options/SquirrelWindowsOptions\"\nexport { WindowsSignOptions, CustomWindowsSignTaskConfiguration, WindowsSignTaskConfiguration, CustomWindowsSign, FileCodeSigningInfo, CertificateFromStoreInfo } from \"./windowsCodeSign\"\nexport { CancellationToken, ProgressInfo } from \"builder-util-runtime\"\nexport { PublishOptions, UploadTask } from \"electron-publish\"\nexport { PublishManager } from \"./publish/PublishManager\"\nexport { PlatformPackager } from \"./platformPackager\"\nexport { Framework, PrepareApplicationStageDirectoryOptions } from \"./Framework\"\nexport { buildForge, ForgeOptions } from \"./forge-maker\"\n\nexport async function build(options: PackagerOptions & PublishOptions, packager: Packager = new Packager(options)): Promise<Array<string>> {\n  // because artifact event maybe dispatched several times for different publish providers\n  const artifactPaths = new Set<string>()\n  packager.artifactCreated(event => {\n    if (event.file != null) {\n      artifactPaths.add(event.file)\n    }\n  })\n\n  const publishManager = new PublishManager(packager, options)\n  const sigIntHandler = () => {\n    log.warn(\"cancelled by SIGINT\")\n    packager.cancellationToken.cancel()\n    publishManager.cancelTasks()\n  }\n  process.once(\"SIGINT\", sigIntHandler)\n\n  return await executeFinally(packager.build().then(() => Array.from(artifactPaths)), errorOccurred => {\n    let promise: Promise<any>\n    if (errorOccurred) {\n      publishManager.cancelTasks()\n      promise = Promise.resolve(null)\n    }\n    else {\n      promise = publishManager.awaitTasks()\n    }\n\n    return promise\n      .then(() => process.removeListener(\"SIGINT\", sigIntHandler))\n  })\n}"],"sourceRoot":""}
